class List
{
  tracked var head: Node

  predicate inv
  {
       acc(head) && rd*(mu)
    && (head != null ==> head.inv && rd*(head.mu) && mu << head.mu)
  }

  function toSeq():seq<int>
    requires inv
  { unfolding inv in head==null ? [] : head.toSeq() }

  method initEmpty()
    requires acc(head) && acc(mu) && mu==lockbottom && head==null
    ensures inv && rd*(mu) && waitlevel<<mu
    ensures toSeq() == []
  {
    share this above waitlevel
    fold inv
  }

  method initCopy(other:List)
    requires acc(head) && acc(mu) && mu==lockbottom && head==null
    requires other!=null && this!=other && other.inv && rd*(other.mu) && waitlevel<<other.mu
    ensures inv && other.inv
    ensures rd*(mu) && waitlevel<<mu
    ensures rd*(other.mu) && waitlevel<<other.mu
    ensures toSeq() == other.toSeq()
    ensures other.toSeq() == old(other.toSeq())
  {
    unfold other.inv
    share this between waitlevel and other.mu
    acquire this
    acquire other
    if(other.head!=null)
    {
      acquire other.head
      head := other.head
      head.refCount := head.refCount + 1
      call head.addOneToTransRefCount()
      release head
    }
    release other
    release this
    fold other.inv
    fold inv
  }

  method insert(value:int)
    requires inv && rd*(mu) && waitlevel<<mu
    ensures inv && rd*(mu) && toSeq() == [value]++old(toSeq())
  {
    var n:Node;
    n:=new Node;
    n.value:=value;
    unfold inv;
    if(head!=null) { acquire head; }
    n.next:=head;
    head:=n;
    head.refCount:=1;
    head.transRefCount:=1;
    if(head.next!=null) { release head.next }
    share head between this and head.next
    fold head.inv
    fold inv
  }

  method set_(index:int, value:int)
    requires inv && 0<=index && index<|toSeq()|
    requires rd(mu) && waitlevel<<mu;
    ensures inv && toSeq()==old(toSeq())[0..index]++[value]++old(toSeq()[index+1..])
  {
    var h:Node
    unfold inv
    if(head!=null)
    {
      acquire head
      if(head.refCount==1)
      {
        call head.set_(index, value)
      }
      else
      {
        head.refCount:=head.refCount-1
        h:=head
        head:=new Node
        call h.copySet_(index, value, head)
      }
    }
    fold inv
  }
}



class Node
{
  var value:int
  tracked var next:Node
  var refCount:int
  var transRefCount:int

  invariant /*A*/ acc(refCount) && acc(transRefCount, 50) && acc(value, 100-rd(transRefCount)) && acc(next, 100-rd(transRefCount))
  invariant /*D*/ next==null ==> acc(transRefCount, 50)
  invariant /*F*/ acc(this.~(Node.next)) && acc(this.~(List.head))
  invariant /*B*/ refCount == |~(Node.next)| + |~(List.head)|
  invariant /*E*/ (forall n: ~(Node.next) :: acc(n.transRefCount, 50))
  invariant /*C*/ transRefCount == (sum n: ~(Node.next) :: n.transRefCount) + |~(List.head)|

  predicate inv
  {
    acc(value, rd(1)) && acc(next, rd(1)) && rd*(mu) && lockbottom != this.mu &&
    (next != null ==> next.inv && rd*(next.mu) && this.mu << next.mu)
  }

  function toSeq():seq<int>
    requires inv
  { unfolding inv in [value] ++ (next==null ? [] : next.toSeq()) }

  method set_(index: int, newValue:int)
    requires inv && rd*(mu)
    requires holds(this)
    requires /*A*/ acc(refCount) && acc(transRefCount, 50) && acc(value, 100-rd(transRefCount)) && acc(next, 100-rd(transRefCount))
    requires /*D*/ next==null ==> acc(transRefCount, 50)
    requires /*F*/ acc(~(Node.next)) && acc(~(List.head))
    requires /*B*/ refCount == |~(Node.next)| + |~(List.head)|
    requires /*E*/ (forall n: ~(Node.next) :: acc(n.transRefCount, 50))
    requires /*C*/ transRefCount == (sum n: ~(Node.next) :: n.transRefCount) + |~(List.head)|
	requires waitlevel==mu
    requires transRefCount == 1 && refCount == 1
    requires 0<=index && index<|toSeq()|
    lockchange this
    ensures inv && toSeq()==old(toSeq())[0..index]++[value]++old(toSeq()[index+1..])
    ensures !holds(this)
  {
    var h: Node
	unfold inv
    if (index == 0)
    {
      value := newValue
      release this
    }
    else
    {
      acquire next
      if (next.refCount == 1)
      {
        release this
        call next.set_(index-1, newValue)
      }
      else
      {
        next.refCount:=next.refCount-1
        h:=next
        next:=new Node
        call h.copySet_(index-1, newValue, next)
        assert refCount == |~(Node.next)| + |~(List.head)|
        assert transRefCount == (sum n: ~(Node.next) :: n.transRefCount) + |~(List.head)|
        release this
      }
    }
    fold inv
  }
  
  method copySet_(index:int, newValue:int, newNode:Node)
    requires inv && rd*(mu)
    requires newNode!=null && acc(newNode.value) && acc(newNode.next) && newNode.next==null && acc(newNode.refCount) && acc(newNode.transRefCount) && acc(newNode.mu) && newNode.mu==lockbottom
    requires acc(newNode.~(Node.next)) && acc(newNode.~(List.head)) && |newNode.~(Node.next)|+|newNode.~(List.head)|==1
  	requires (forall n: newNode.~(Node.next) :: acc(n.transRefCount,50)) && (sum m : newNode.~(Node.next) :: m.transRefCount) + |newNode.~(List.head)| == 1
    requires waitlevel==mu && holds(this)
    requires /*A*/ acc(refCount) && acc(transRefCount, 50) && acc(value, 100-rd(transRefCount)) && acc(next, 100-rd(transRefCount))
    requires /*D*/ next==null ==> acc(transRefCount, 50)
    requires /*F*/ acc(~(Node.next)) && acc(~(List.head))
    requires /*B*/ refCount == |~(Node.next)| + |~(List.head)|
    requires /*E*/ (forall n: ~(Node.next) :: acc(n.transRefCount, 50))
    requires transRefCount == (sum m: ~(Node.next) :: m.transRefCount) + |~(List.head)| + 1
    requires 0<=index && index<|toSeq()|
    lockchange this
    ensures newNode.inv && newNode.toSeq()==old(toSeq())[0..index]++[value]++old(toSeq()[index+1..])
    ensures rd*(newNode.mu) && rd*(mu) && mu<<newNode.mu
    ensures !holds(this) && !holds(newNode)
  {
    unfold inv
    newNode.refCount:=1
    newNode.transRefCount:=1
    if(next!=null)
	{
	  acquire next
	}
    transRefCount:=transRefCount-1
    if(index==0)
    {
      newNode.value:=newValue
      newNode.next:=next
      if(next!=null)
	  {
        next.refCount:=next.refCount+1
        release next
      }
    }
    else
    {
      assert newNode.transRefCount==1
      newNode.value:=value
      if(next!=null)
      {
        newNode.next:=new Node
        call next.copySet_(index-1, newValue, newNode.next)
      }
      else { newNode.next:=null }
    }
    assert newNode.transRefCount==1
    share newNode between this and newNode.next
    fold newNode.inv
    release this
  }

  method addOneToTransRefCount()
    requires inv && holds(this)
    requires /*A*/ acc(refCount) && acc(transRefCount, 50) && acc(value, 100-rd(transRefCount)) && acc(next, 100-rd(transRefCount))
    requires /*D*/ next==null ==> acc(transRefCount, 50)
    requires /*F*/ acc(~(Node.next)) && acc(~(List.head))
    requires /*B*/ refCount == |~(Node.next)| + |~(List.head)|
    requires /*E*/ (forall n: ~(Node.next) :: acc(n.transRefCount, 50))
    requires unfolding inv in waitlevel==mu
    requires transRefCount == (sum n: ~(Node.next) :: n.transRefCount) + |~(List.head)| - 1
    ensures inv && inv
    ensures holds(this)
    ensures /*A*/ acc(refCount) && acc(transRefCount, 50) && acc(value, 100-rd(transRefCount)) && acc(next, 100-rd(transRefCount))
    ensures /*D*/ next==null ==> acc(transRefCount, 50)
    ensures /*F*/ acc(~(Node.next)) && acc(~(List.head))
    ensures /*B*/ refCount == |~(Node.next)| + |~(List.head)|
    ensures /*E*/ (forall n: ~(Node.next) :: acc(n.transRefCount, 50))
    ensures /*C*/ transRefCount == (sum n: ~(Node.next) :: n.transRefCount) + |~(List.head)|
	ensures unfolding inv in waitlevel==mu
    ensures toSeq() == old(toSeq())
    ensures ~(Node.next)==old(~(Node.next)) && ~(List.head)==old(~(List.head))
  {
    unfold inv
    if(next!=null)
    {
      acquire this.next
    }
    transRefCount := transRefCount + 1;
    if(next!=null)
    {
      call next.addOneToTransRefCount()
      release this.next
    }
    fold inv
    fold inv
  }
}



class Main
{
  method main()
  {
    var l1:List
    var l2:List
    
    l1 := new List
    call l1.initEmpty()
    assert l1.toSeq() == []
    call l1.insert(42)
    assert l1.toSeq()[0] == 42
    call l1.insert(43)
    assert l1.toSeq()[0] == 43
    assert l1.toSeq()[1] == 42
    l2 := new List
    call l2.initCopy(l1)
    assert l2.toSeq() != []
    assert l2.toSeq()[0] == 43
    assert l2.toSeq()[1] == 42
    call l1.set_(0, -42)
    assert l1.toSeq()[0] == -42
    assert l2.toSeq()[0] == 43
    assert |l1.toSeq()| == 2
    assert |l2.toSeq()| == 2
    call l2.insert(1337)
    assert l2.toSeq()[0] == 1337
    assert l2.toSeq()[1] == 43
    assert l2.toSeq()[2] == 42
    assert l1.toSeq()[0] == -42
    assert l1.toSeq()[1] == 42
    assert |l1.toSeq()| == 2
    assert |l2.toSeq()| == 3
    call l1.set_(1, -99)
    assert l1.toSeq()[1] == -99
    assert l2.toSeq()[2] == 42
  }
}
