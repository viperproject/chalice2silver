class Cell {
    var f : int;
}

class SuperCell {
    var cell : Cell;
}

class Main {
    method parallel(d : SuperCell) returns (r: bool)
        requires d != null ==> rd(d.cell) && d.cell != null && rd(d.cell.f) && d.cell.f == 5
        ensures r == (d != null)
        ensures r ==> old(d.cell.f == 5)
        ensures r ==> (rd(d.cell) && rd(d.cell.f))
    {
          r := d != null;
    }

    method main(d : SuperCell, c : Cell)
        requires acc(d.cell) && acc(c.f)
        ensures acc(d.cell) && acc(c.f)
    {
        var r : bool;
        d.cell := c;
        c.f := 5;
        fork tk := parallel(d)
        assert c.f == 5;
        join r := tk;
        assert r;
    }

    method main2(d : SuperCell)
        requires d != null ==> acc(d.cell) && d.cell != null && acc(d.cell.f) && d.cell.f == 5
    {
        var r : bool;
        fork tk := parallel(d);
        assert d != null ==> d.cell.f == 5;
        join r := tk;
        assert (d != null) == r;
        if(d != null){
            d.cell.f := 7;
        }
    }

    method main3()
    {
        var r : bool;
        fork tk := parallel(null);
        r := true;
        join r := tk;
        assert !r;
    }
}