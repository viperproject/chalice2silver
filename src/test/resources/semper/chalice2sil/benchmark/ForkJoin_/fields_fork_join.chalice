// @Ignore MatchError for IfThenElseTerm, see issue 3
class Async {
	var x: bool
	
	method negX() returns (y: bool)
		requires acc(x)
		ensures acc(x)
		ensures x == !old(x)
		ensures y == old(x)
	{
		y := x
		x := !x
	}
	
	method greedyNegX() returns (y: bool)
		requires acc(x)
		ensures rd(x)
		ensures x == !old(x)
		ensures y == old(x)
	{
		y := x
		x := !x
	}	
	
	method useNegX()
		requires acc(x)
		ensures acc(x)
	{
		var y: bool
		x := true
		fork tk := negX()
		join y := tk
		assert(x == false)
		assert(y == true)
	}
	
	method failUseNegX()
		requires acc(x)
	{
		fork tk1 := negX()
		fork tk2 := negX() /* @Error 230 */
	}

	method useGreedyNegX() returns (b: bool)
		requires acc(x)
		ensures rd(x) /* @Error 330 */
		ensures x == !old(x)
		ensures b == old(x)
	{
		fork tk := greedyNegX()
		join b := tk
	}

	method failUseGreedyNegX()
		requires acc(x)
	{
		fork tk1 := greedyNegX()
		fork tk2 := greedyNegX() /* @Error 230 */
	}
}

class Cell {
	var x: int
	
	method set(a: int)
		requires acc(x)
		ensures acc(x)
		ensures x == a
	{ x := a }
	
	method double()
		requires acc(x)
		ensures acc(x)
		ensures x == 2 * old(x)
	{ x := x + x }
	
	method inc()
		requires acc(x)
		ensures acc(x)
		ensures x == old(x) + 1
	{ x := x + 1}
}

class CellFactory {
	method make(a: int) returns (c: Cell)
		ensures c != null
		ensures acc(c.x)
		ensures c.x == a
	{
		c := new Cell
		c.x := a
	}
	
	method useMake(a: int)
	{
		var c1: Cell
		var c2: Cell
		var c3: Cell
		var c4: Cell

		fork tk1 := make(9)
		fork tk2 := make(10)
		fork tk3 := make(11)
		join c2 := tk2
		assert(c2.x == 10)
		join c1 := tk1
		assert(c1.x == 9)
		join c3 := tk3
		assert(c3.x == 11)
		fork tk4 := make(c3.x + 1)
		join c4 := tk4
		assert(c4.x == 12)
	}
}




class ReuseTokens {
	method reuse() {
		var c1: Cell := new Cell
		var c2: Cell := new Cell
		fork tk := c1.set(5)
		fork tk := c2.set(7)
		join tk
		assert(c2.x == 7)
		// assert(c1.x == 5) /* Fails - c1.x might not be readable */
	}
}


class IfThenElse {
	var tk1: token<Cell.set>
	var tk2: token<Cell.set>
	
	function get(b: bool): token<Cell.set>
		requires b ==> acc(tk1)
		requires !b ==> acc(tk2)
	{ b ? tk1 : tk2 }
	
	/* TODO: Fails in Chalice due to Boogie type errors. Bug? */
	method succeed(a: int)
		requires acc(tk1) && acc(tk2)
		ensures acc(tk1) && acc(tk2)
	{
		var c1: Cell := new Cell
		var c2: Cell := new Cell
		call c1.set(0)
		call c2.set(0)
		fork tk1 := c1.set(1)
		this.tk1 := tk1
		fork tk2 := c2.set(2)
		this.tk2 := tk2
		join get(a > 0)
		assert(a > 0 ? c1.x == 1 : c2.x == 2)
	}
}


class TokenCell {
	var tk: token<Cell.double>
	
	method set(tk: token<Cell.double>)
		requires acc(this.tk)
		ensures acc(this.tk)
		ensures get() == tk
	{ this.tk := tk }
	
	/* TODO: Failes with implicit this-reference due to type error. Probably
	 *       a bug in the Chalice parser.
	 */
	function get(): token<Cell.double>
		requires rd(this.tk)
	{ this.tk }
	
	function getget(b: bool): token<Cell.double>
		requires rd(this.tk)
	{ b ? get() : get() }
}

class TokenCellTest {
	method useTokenCell(a: int) returns (r: int) {
		var tc: TokenCell := new TokenCell
		var c: Cell := new Cell
		call c.set(2)
		fork tk := c.double()
		call tc.set(tk)
		join tc.get()
		assert(c.x == 4)
	}
}