class Cell { var x: int }

class Test {
	var b: bool
	var c: Cell
	var d: Cell

	method succeeds1() returns (r: bool)
		requires rd(c) && rd(d) && rd(b)
		requires c != null && d != null
		requires b <==> c == d
		requires acc(c.x, 50) && acc(d.x, 50)
		ensures rd(c) && rd(d) && rd(b)
		ensures c != null && d != null
		ensures b ==> acc(d.x, 100)
		// ensures b <==> acc(d.x, 100) /* Rejected by the Chalice's typechecker */
		ensures r == true
	{
		if (b) {
			assert acc(c.x, 100) // @IgnoreError 410 (see issue 11)  // fails in Chalice2SIL+Silicon, succeeds in Syxc
		}

		r := b ? c == d : true
	}
	
	method succeeds2() returns (r: bool)
		requires rd(c) && rd(d) && rd(b)
		requires c != null && d != null
		requires b <==> c == d
		requires rd(c.x) && rd(d.x)
		ensures rd(c) && rd(d) && rd(b)
		ensures c != null && d != null
		ensures rd(c.x) && rd(d.x)
		ensures b ==> c.x == d.x  // @IgnoreError 310 (see issue 11)  // fails in Chalice2SIL+Silicon, succeeds in Syxc
	{}
	
	method fails1() returns (r: bool)
		requires rd(c) && rd(d) && rd(b)
		requires c != null && d != null
		requires b <==> c == d
		requires acc(c.x, 50) && acc(d.x, 50)
		ensures rd(c) && rd(d) && rd(b)
		ensures c != null && d != null
		ensures b ==> acc(d.x, 100)
		ensures b ==> acc(c.x, 100) /* @   Error 330: this error is missing at the moment, because Silicon stops at the first error. */
		ensures r == true
	{
		if (b) {
			assert acc(c.x, 100) // @IgnoreError 410 (see issue 11)
		}

		r := b ? c == d : true
	}
	
	method fails2() returns (r: bool)
		requires rd(c) && rd(d) && rd(b)
		requires c != null && d != null
		requires b <==> c == d
		requires rd(c.x) && rd(d.x)
		ensures rd(c) && rd(d) && rd(b)
		ensures c != null && d != null
		ensures rd(c.x) && rd(d.x)
		ensures b <==> c.x == d.x /* @Error 310 */
			/* c.x and d.x might be equal although c != d and hence !b */
	{}
}