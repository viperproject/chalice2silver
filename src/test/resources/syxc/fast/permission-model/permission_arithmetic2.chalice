class Test01 {
  var f: int

  predicate P { rd(f) }
  
  method inttimes01()
    requires acc(f, 2 * rd(P))
    ensures acc(f, rd(P) * 2)
  {}
  
  
  
  
  method dispose1()
    requires acc(f, 100 - rd(P))
    requires acc(f, rd(P))
  {
    assert acc(f)
  }
  
  method dispose2a()
    requires acc(f, 100 - rd)
    requires acc(f, rd)
  {
    assert acc(f)
  }
  
  method dispose2b()
    requires acc(f, rd)
    requires acc(f, 100 - rd)
  {
    assert acc(f)
  }
  
  
  
  method test01()
    requires acc(f)
    ensures rd*(f) /* @Error 330 */
  {
    call dispose1()
  }
  
  method test02()
    requires acc(f)
    ensures rd*(f) /* @Holds */
      /* As mentioned in Stefan's BSc thesis, rd's must be exhaled before
       * acc's, otherwise exhaling 100-rd && rd behaves different
       * from exhaling rd && 100-rd.
       */
  {
    call dispose2a()
  }
  
  method test03()
    requires acc(f)
    ensures rd*(f) /* @Error 330 */
  {
    call dispose2b()
  }
}

class Test02 {
  var f: int
  
  predicate P01 {
    rd(f) && acc(f, 25 - 2 * (0 - rd(P01) + 3 * rd(P01))) && acc(f, 70 + 2 + 3) && acc(f, (8 - 5) * rd(P01))
  }
  
  method test01()
    requires P01
    ensures acc(f)
  {
    unfold P01
  }
  
  method test02()
    requires P01
    ensures acc(f)
  {
    unfold acc(P01, 33)
    unfold acc(P01, 66)
    unfold acc(P01, 1)
  }

  method test03()
    requires P01
    ensures P01
  {
    unfold acc(P01, 33)
    unfold acc(P01, 33)
    unfold acc(P01, 34)
    fold acc(P01, 40)
    fold acc(P01, 11)
    fold acc(P01, 49)
  }
  
  /* Still kills the prover (Z3 3.2) ... how unfortunate. */
  // method test04()
    // requires P01
    // ensures P01
  // {
    // unfold acc(P01, rd(P01))
    // unfold acc(P01, 100 - 2 * rd(P01))
    // unfold acc(P01, rd(P01))
    // fold acc(P01, 100 - (3 * (rd(P01) + rd(P01)) - rd(P01)))
    // fold acc(P01, 4 * rd(P01))
    // fold acc(P01, rd(P01))
  // }
}