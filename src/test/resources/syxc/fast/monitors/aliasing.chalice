// @IgnoreFile
// VariableExpr is currently not supported in Syxc due to changes made
// when introducing the tuple representation (w, r) of permissions
// as part of the work on immutability.

class Cell { var x: int }

class Test {
	method get(n: int) returns (c1: Cell, c2: Cell)
		requires 0 < n && n <= 100
		ensures c1 != null && c2 != null
		ensures acc(c1.mu, n) && acc(c2.mu, n)
		ensures holds(c1) && holds(c2)
		lockchange c1, c2
	{
		c1 := new Cell
		c2 := new Cell
		share c1
		share c2 above c1
		acquire c1
		acquire c2
	}
	
	method testRd() {
		var c1: Cell
		var c2: Cell
		call c1, c2 := get(1) /* c1, c2 might be aliases */
		release c1
		release c2 /* @Error 1346 */
	}

	method test51() { /* @Fails */
			/* Empty lockchange set seems to be insufficient, but
			 *  - c1, c2 can't be mentioned in the lockchange clause because they are 
			 *    local variables
			 *  - c1, c2 can't be unshared instead of released because the thread 
			 *    doesn't have write access to their mu-fields
			 */
		var c1: Cell
		var c2: Cell
		call c1, c2 := get(51) /* 51% implies that c1 != c2 */
		release c1
		release c2
	}
}