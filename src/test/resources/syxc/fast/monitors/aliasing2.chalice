class Test01 {
	method fails01(t1: Test01, t2: Test01)
		requires t1 != null && t2 != null
		requires rd(t1.mu) && rd(t2.mu)
		requires holds(t1) && holds(t2)
	{
		release t1
		release t2 /* @Error 1346 */
	}
  
	method fails02(t1: Test01, t2: Test01)
		requires t1 != null && t2 != null
		requires rd(t1.mu) && rd(t2.mu)
		requires holds(t1) && holds(t2)
	{
		release t1
    assert !holds(t2) /* @Error 410 */
	}
  
	method holds01(t1: Test01, t2: Test01)
		requires t1 != null && t2 != null
		requires rd(t1.mu) && rd(t2.mu)
    requires t1 != t2
		requires holds(t1) && holds(t2)
    lockchange t1, t2
	{
		release t1
    release t2
	}
  
	method holds02(t1: Test01, t2: Test01)
		requires t1 != null && t2 != null
		requires acc(t1.mu, 50) && acc(t2.mu, 51)
		requires holds(t1) && holds(t2)
    lockchange t1, t2
	{
		release t1
    release t2
	}
  
	method holds03(t1: Test01, t2: Test01)
		requires t1 != null && t2 != null
		requires rd(t1.mu) && rd(t2.mu)
		requires holds(t1) && holds(t2)
    requires t1.mu << t2.mu
    lockchange t1, t2
	{
		release t1
    release t2
      /* Holds, because 't1.mu << t2.mu ==> t1 != t2', which Syxc adds as an
       * additional assumption when producing 't1.mu << t2.mu'.
       */
	}
}


class Cell {
  var x: int
}

class Test02 {
  method test(c1: Cell, c2: Cell)
    requires rd(c1.x) && rd(c2.x)
    requires c1.x != c2.x
  {
    /* In general, Syxc does not encode that
     * 't1.f != t2.f ==> t1 != t2' for all fields f.
     */
    assert c1 != c2 /* @Fails */
  }
}