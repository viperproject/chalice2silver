/* Alex' found a couple of unsoundnesses in Chalice and the demonstrating 
 * program given below also uncovered a couple of unsoundnesses in Syxc.
 */

class C {
  method reordering(x: C, y:C, z:C)
    requires x != null
    requires acc(x.mu) && acc(y.mu, rd) && acc(z.mu, rd)
    requires holds(x)
    requires y.mu << z.mu
    ensures acc(x.mu) && acc(y.mu, rd)
    ensures y.mu << x.mu
  {
    assume waitlevel << z.mu
    
    unshare x
    share x above z
    acquire x
  }

  method main(b: bool) {
    var x := new C
    var y := new C
    var z := new C
    
    share x
    share y above x
    share z above y

    acquire x
    
    acquire y
    release y
    
    call reordering(x, y, z)
    
    acquire y /* @Error 1280 */
      // fails, as we don't remember x.mu in the case that holds(x) is passed on (and we do not hold permission) - compare with forking_main below
  }

  method forked_reordering(x: C, y: C, z: C)
    requires x != null
    requires acc(x.mu) && acc(y.mu, rd) && acc(z.mu, rd)
    requires y.mu << z.mu
    ensures acc(x.mu) && acc(y.mu, rd)
    ensures y.mu << x.mu
  {
    assume waitlevel << x.mu // needed because we cannot initialise waitlevel correctly
    assert !holds(x)

    acquire x
    unshare x

    share x above z
    assert !holds(x)
    // assert old(!holds(x))
  }

  method forking_main(b: bool) {
    var x := new C
    var y := new C
    var z := new C

    share x
    share y above x
    share z above y

    acquire x
    
    acquire y
    release y

    fork tk := forked_reordering(x,y,z) // notionally, fork tk below x.mu and above old(waitlevel)

    acquire y // even though we cannot read x.mu, we get to remember its value so long as we hold the lock

    release x
      /* We held x before the fork, and since we cannot transfer the lock we also hold
       * it after the fork. This means that the execution of forked_reordering will block
       * at 'acquire x' until we release it here.
       */

    release y

    // acquire x /* Should fail, because we lost all information about x.mu */

    join tk

    acquire y
    acquire x
    
    assert false /* @Error 410 */
  }
}