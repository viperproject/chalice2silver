channel ChTrue() where true
channel ChPositive(x: int) where x >= 0
channel ChPair(x: int, y: int) where x + y == 0

class SendTests {
	method succeeds1() {
		var ch: ChTrue := new ChTrue
		assert credit(ch, 0)
		send ch()
		assert credit(ch, 1)
		send ch()
		assert credit(ch, 2)
	}
	
	method fails1() {
		var ch: ChTrue := new ChTrue
		assert credit(ch, 0)
		send ch()
		assert credit(ch, 2) /* @Error 410 */
	}
	
	method succeeds2(x: int)
		requires x >= 0
	{
		var ch: ChPositive := new ChPositive
		send ch(0)
		send ch(10)
		send ch(x)
		assert credit(ch, 3)
	}
	
	method fails2(x: int)
	{
		var ch: ChPositive := new ChPositive
		send ch(x) /* @Error 2110 */
	}
}

class ReceiveTests {
	method fails1(ch: ChTrue)
	{ receive ch } /* @Error 2260 */
	
	method fails3(ch: ChTrue)
		requires ch != null
	{ receive ch } /* @Error 2270 */
	
	method fails2(ch: ChTrue)
		requires ch != null
		requires credit(ch, 1)
	{ receive ch } /* @Error 2230 */
	
	method fails4(ch: ChTrue)
		requires ch != null
		requires credit(ch, 1) && rd(ch.mu)
	{ receive ch } /* @Error 2280 */
	
	method fails6(ch1: ChTrue, ch2: ChTrue)
		requires ch1 != null && ch2 != null
		requires ch1 == ch2
		requires credit(ch1, 1) && credit(ch2, -1)
	{ receive ch1 } /* @Error 2270 */
	
	method fails5(ch1: ChTrue, ch2: ChTrue)
		requires ch1 != null && ch2 != null
		requires credit(ch1, 1) && rd(ch1.mu) && waitlevel << ch1.mu
		requires credit(ch2, -1)
	{
		receive ch1 /* @Error 2270 */
			/* ch1 and ch2 might be aliases, in which case the thread has zero
			 * credits.
			 */
	}
	
	method succeeds5(ch: ChPositive)
		requires ch != null
		requires credit(ch, 1) && rd(ch.mu) && waitlevel << ch.mu
	{
		var a: int
		receive a := ch
		assert a >= 0
	}
	
	method fails8(ch1: ChPositive, ch2: ChPositive)
		requires ch1 != null && ch2 != null
		requires ch1 != ch2
		requires credit(ch1, 1) && rd(ch1.mu) && waitlevel << ch1.mu
		requires credit(ch2, -1) /* Invalidates waitlevel << ch1.mu */
	{ receive x := ch1 /* @Error 2280 */ }
	
	method succeeds1(ch1: ChPositive, ch2: ChPositive)
		requires ch1 != null && ch2 != null
		requires ch1 != ch2
		requires credit(ch2, -1)
		requires credit(ch1, 1) && rd(ch1.mu) && waitlevel << ch1.mu
		ensures credit(ch2, -1)
	{
		receive x := ch1
		assert x >= 0
	}
	
  method fails7(ch: ChTrue)
    requires ch != null && credit(ch, 2)
    requires rd(ch.mu) && waitlevel << ch.mu
  {
    receive ch
    receive ch
    receive ch /* @Error 2270 */
  }
	
	/* Tests mixing already and newly declared targets */
	method succeeds6(ch: ChPair) returns (x: int)
		requires ch != null
		requires credit(ch, 2) && rd(ch.mu) && waitlevel << ch.mu
	{
		receive x, y := ch
		assert x + y == 0
		
		// receive y, this.f := ch /* Type error: identifier expected */
		// assert this.f + y == 0
	}
}