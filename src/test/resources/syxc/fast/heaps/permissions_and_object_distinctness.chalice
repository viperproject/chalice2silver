// @IgnoreFile
// VariableExpr is currently not supported in Syxc due to changes made
// when introducing the tuple representation (w, r) of permissions
// as part of the work on immutability.

class Cell { var x: int }

class Test {
	method different(c1: Cell, c2: Cell)
		requires c1 != null && c2 != null
		requires acc(c1.x) && acc(c2.x)
	{
		assert c1.x == old(c1.x) && c2.x == old(c2.x)
		c1.x := 0
		assert c1.x == 0 && c2.x == old(c2.x)
	}
	
	method get(n1: int, n2: int) returns (c1: Cell, c2: Cell)
		requires 0 < n1 && n1 <= 100
		requires 0 < n2 && n2 <= 100
		ensures c1 != null && c2 != null
		ensures acc(c1.x, n1) && acc(c2.x, n2)
	{
		c1 := new Cell
		c2 := new Cell
		assert c1 != c2		
	}
	
	method useGet1() {
		var c1: Cell
		var c2: Cell
		call c1, c2 := get(1, 1)
		assert c1 != c2 /* @Error 410 */
	}
	
	method useGet50() {
		var c1: Cell
		var c2: Cell
		call c1, c2 := get(50, 50)
		assert c1 != c2 /* @Error 410 */
	}
	
	method useGet51() {
		var c1: Cell
		var c2: Cell
		call c1, c2 := get(51, 51)
		assert c1 != c2
	}
	
	method useGet100() {
		var c1: Cell
		var c2: Cell
		call c1, c2 := get(100, 100)
		assert c1 != c2
	}
	
	method useGet70_29() {
		var c1: Cell
		var c2: Cell
		call c1, c2 := get(70, 29)
		assert c1 != c2 /* @Error 410 */
	}
	
	method useGet70_30() {
		var c1: Cell
		var c2: Cell
		call c1, c2 := get(70, 30)
		assert c1 != c2 /* @Error 410 */
	}	
	
	method useGet70_31() {
		var c1: Cell
		var c2: Cell
		call c1, c2 := get(70, 31)
		assert c1 != c2
	}
}