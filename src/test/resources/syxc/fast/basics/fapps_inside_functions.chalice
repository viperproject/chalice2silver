/* TODO: Silicon does not yet perform termination checks for functions. Smans'
 *       second symbex-paper contains a paragraph about this.
 */
class Functions {
	function f1(i: int): int
	{ i + i}
	
	function f2(i: int): int
	{ i + f1(i) } /* Chalice: Termination error */
	
	function ff(i: int): int
	{ i > 0 ? i : ff(i + 1) }	/* Chalice: Termination error */
	
	function g1(i: int): int
	{ i > 0 ? i : g2(i + 2) } /* Chalice: Termination error */
	
	function g2(i: int): int
	{ g1(i - 1) } /* Chalice: Termination error */
	
	method useF1(a: int)
	{
		assert(f1(2) == 4)
		assert(f1(a) == 2 * a)
	}
	
	method useF2(a: int)
	{
		assert(f2(3) == 9)
		assert(f2(a) == 3 * a)
	}
	
	method useFF(a: int, b: int)
		requires a > 0
	{
		assert(ff(3) == 3)
		assert(ff(a) == a)
		//:: ExpectedError(ass.violated:ass.false)
		//   Requires an inductive proof
		assert(ff(b) > 0)
	}
	
	method useG1_1() {
		assert(g1(3) == 3)
		//:: ExpectedError(ass.violated:ass.false)
		//   Silicon: Holds with --unrollFunctions 2
		assert(g1(-1) == 1)
	}	
	
	method useG1_2(a: int, b: int)
		requires a > 0
	{
		assert(g1(a) > 0)
		assert(g1(a) == a)
		//:: ExpectedError(ass.violated:ass.false)
		//   Requires an inductive proof
		assert(g1(b) > 0)
	}
}