////////////////////////////////////////////////////////
////////////////////////////////////////////////////////
class AVLTree{
	//////////////////////////////////////////////////////////
	var root : AVLTreeNode;
	ghost var keys : seq<int>;

	//////////////////////////////////////////////////////////
	predicate valid{
		   acc(root,100)
		&& acc(keys,50)
		&& (root!=null ==> root.valid)
		&& (root!=null ==> acc(root.height       ,50))
		&& (root!=null ==> acc(root.keys         ,50))
		&& (root!=null ==> acc(root.balanceFactor,50))
		&& (root!=null ==> keys == root.keys)
		&& (root==null ==> keys == nil<int>)
	}

	//////////////////////////////////////////////////////////
	method init()
		requires acc(root,100);
		requires acc(keys,100);

		ensures valid;
		ensures acc(keys,50);
		ensures keys == nil<int>;
	{
		root := null;
		keys := nil<int>;
		fold valid;
	}

	//////////////////////////////////////////////////////////
	method insert(k : int)
		requires valid;
		requires acc(keys,50);

		ensures valid;
		ensures acc(keys,50);

		ensures k in keys;
		ensures forall j in old(keys) :: j in keys;
		ensures forall j in keys :: ( j in old(keys) || j==k);
	{
		unfold valid;
		if (root==null){
			var n : AVLTreeNode := new AVLTreeNode;
			call n.init(k);
			root := n;
		}else{
			call r := root.insert(k);
			root := r;
		}
		keys := root.keys;
		fold valid;
	}

	//////////////////////////////////////////////////////////
	method remove(k : int)
		requires valid;
		requires acc(keys,50);

		ensures valid;
		ensures acc(keys,50);

		ensures !(k in keys);
		ensures forall j in old(keys) :: j in keys || j==k;
		ensures forall j in keys :: ( j in old(keys) && j!=k);
	{
		unfold valid;
		if (root==null){
		}else{
			call r := root.remove(k);
			root := r;
			keys := (root==null?nil<int>:root.keys);
		}
		fold valid;
	}

	//////////////////////////////////////////////////////////
	method has(k : int) returns (b : bool)
		requires valid;
		requires rd(keys);

		ensures valid;
		ensures rd(keys);
		ensures b == (k in keys);
	{
		unfold valid;
		if (root==null){
			b := false;
		}else{
			var bb : bool;
			call bb:= root.has(k);
			b := bb;
		}
		fold valid;
	}
}

////////////////////////////////////////////////////////
////////////////////////////////////////////////////////
class AVLTreeNode{
	//////////////////////////////////////////////////////////
	var key    : int;
	var height : int;
	var left  : AVLTreeNode;
	var right : AVLTreeNode;

	//////////////////////////////////////////////////////////
	ghost var keys : seq<int>;
	ghost var balanceFactor : int;

	//////////////////////////////////////////////////////////
	predicate valid{
		   acc(key   ,100)
		&& acc(height,50)
		&& acc(left  ,100)
		&& acc(right ,100)

		&& acc(keys         ,50)
		&& acc(balanceFactor,50)

		&& (left!=null ==> left.valid)
		&& (left!=null ==> acc(left.height       ,50))
		&& (left!=null ==> acc(left.keys         ,50))
		&& (left!=null ==> acc(left.balanceFactor,50))
		&& (left!=null ==> forall lk in left.keys :: lk < key)
		&& (left!=null ==> left.height > 0)

		&& (right!=null ==> right.valid)
		&& (right!=null ==> acc(right.height       ,50))
		&& (right!=null ==> acc(right.keys         ,50))
		&& (right!=null ==> acc(right.balanceFactor,50))
		&& (right!=null ==> (forall rk in right.keys :: key < rk ))
		&& (right!=null ==> right.height > 0)

		&& keys          == ( left==null ? nil<int> : left.keys ) ++ [key] ++ ( right==null ? nil<int> : right.keys )
		&& key in keys
		&& (forall kk : int :: 
				((kk in keys )
					<==> 
				 (( left !=null && kk in left .keys ) || ( right!=null && kk in right.keys ) || kk == key ))
			)
		&& height        == ( (left==null?0:left.height)>(right==null?0:right.height) ? (left==null?0:left.height)+1 : (right==null?0:right.height)+1 )
		&& balanceFactor == (left==null?0:left.height) - (right==null?0:right.height)
		&& balanceFactor<= 1
		&& balanceFactor>=-1
		&& height > 0
	}

	//////////////////////////////////////////////////////////
	method init(k : int)
		requires acc(key   ,100);
		requires acc(height,100);
		requires acc(left  ,100);
		requires acc(right ,100);

		requires acc(keys         ,100);
		requires acc(balanceFactor,100)

		ensures valid;
		ensures acc(keys,  50);
		ensures acc(height,50);
		ensures acc(balanceFactor,50);

		ensures height == 1;
		ensures keys == [k];
		ensures balanceFactor == 0;

		ensures k in keys;
	{
		left   := null;
		right  := null;
		key    := k;

//		assert [k][0] == k;
		call close();
	}

	//////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////
	method insert(k : int) returns ( r : AVLTreeNode )
		requires valid;
		requires acc(keys,  50);
		requires acc(height,50);
		requires acc(balanceFactor,50);

		ensures r != null;
		ensures r.valid;
		ensures acc(r.keys,  50);
		ensures acc(r.height,50);
		ensures acc(r.balanceFactor,50);

		ensures k in r.keys;
		ensures forall i in old(keys) :: i in r.keys;
		ensures forall i in r.keys :: ( i in old(keys) || i==k);
		ensures k in old(keys) ==> r.keys==old(keys);
		ensures !(k in old(keys)) ==> |r.keys| == |old(keys)|+1;
		
		ensures ( r.height == old(height) ) || ( r.height == old(height) + 1 );
		ensures k in old(keys) ==> r.height==old(height);
	{
		unfold valid;
		if (key==k){
			r := this;
			assert k==[key][0];
			call r.close();
		}else{ //key!=k
			if (k<key){ //insert left
				var nl : AVLTreeNode;
				if (left==null){
					nl := new AVLTreeNode;
					call nl.init(k);
				}else{
					call nl := left.insert(k);
				}
				left := nl;
				var bf : int;
				call bf := getBalanceFactorI();

				if (bf==2){ //rebalance
					call r:= rebalanceLeft();
				}else{ //no rebalance
					r := this;
					call r.close();
				}
			}else{ // k>key -- insert right
				var nr : AVLTreeNode;
				if (right==null){
					nr := new AVLTreeNode;
					call nr.init(k);
				}else{
					call nr := right.insert(k);
				}
				right := nr;
				
				var bf : int;
				call bf := getBalanceFactorI();
				if (bf==-2){ //rebalance
					call r := rebalanceRight();
				}else{//no rebalance
					r := this;
					call r.close();
				}
			}
		}
	}

	//////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////
	method remove(k : int) returns ( r : AVLTreeNode )
		requires valid;
		requires acc(keys,  50);
		requires acc(height,50);
		requires acc(balanceFactor,50);

		ensures old(keys)==[k] ==> r == null;
		ensures old(keys)!=[k] ==> r != null;

		ensures r != null ==> r.valid;
		ensures r != null ==> acc(r.keys,  50);
		ensures r != null ==> acc(r.height,50);
		ensures r != null ==> acc(r.balanceFactor,50);

		ensures r != null ==> !(k in r.keys);
		ensures r != null ==> forall i in old(keys) :: ( i in   r.keys  || i==k);
		ensures r != null ==> forall i in   r.keys  :: ( i in old(keys) && i!=k);
		ensures !(k in old(keys)) ==>  r.keys  ==  old(keys);
		ensures r != null ==> k in old(keys)  ==> |r.keys| == |old(keys)|-1;
		
		ensures old(height)>1 ==> r!=null;
		ensures r != null ==> r.height==old(height) || r.height+1==old(height);
		ensures !(k in old(keys)) ==> r.height==old(height);
	{
		unfold valid;
		if (key==k){
			if (left==null || right==null){
				assert right!=null ==> unfolding right.valid in right.keys != nil<int>;
				assert left !=null ==> unfolding left .valid in left .keys != nil<int>;
				if (left==null){ //replace with right
					r := right;
				}else{ //right==null
					r := left;
				}
			}else{ //prune max/min of left/right
				var bf : int;
				var nl : AVLTreeNode := left;
				var nr : AVLTreeNode := right;
				
				call bf := getBalanceFactorI();
				if (bf > 0 ){ //left larger - prune leftmax
					call nl,r := left.pruneMax();
				}else{ //right larger equal - prune rightmin
					call nr,r := right.pruneMin();
				}
				unfold r.valid;
				r.left  := nl;
				r.right := nr;
				call r.close();
			}
		}else{ //key!=k
			if (k<key){ //remove left
				if (left!=null){
					var nl : AVLTreeNode;
					call nl := left.remove(k);
					left := nl;

					var bf : int;
					call bf := getBalanceFactorI();

					if (bf==-2){ //rebalance
						call r:=rebalanceRight();
					}else{ //no rebalance
						call close();
						r := this;
					}
				}else{
					r := this;
					call r.close();
				}
			}else{ // k>key -- remove right
				if (right != null){
					var nr : AVLTreeNode;
					call nr := right.remove(k);
					right := nr;
					
					var bf : int;
					call bf := getBalanceFactorI();
					if (bf==2){ //rebalance
						call r := rebalanceLeft();
					}else{//no rebalance
						r := this;
						call r.close();
					}
				}else{
					r := this;
					call r.close();
				}
			}
		}
	}

	//////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////
	method pruneMax() returns ( r : AVLTreeNode, m : AVLTreeNode )
		requires valid;
		requires acc(keys,  50);
		requires acc(height,50);
		requires acc(balanceFactor,50);

		ensures r != null ==> r.valid;
		ensures r != null ==> acc(r.keys,  50);
		ensures r != null ==> acc(r.height,50);
		ensures r != null ==> acc(r.balanceFactor,50);
		ensures r != null ==> (r.height == old(height) || r.height+1 == old(height));
		ensures r !=null ==> |r.keys|+1 == |old(keys)|;
		ensures old(height) >1 ==> r != null;
		ensures old(height)==1 ==> r == null;
		ensures old(height)==(r==null?0:r.height) || old(height)==(r==null?0:r.height)+1;
		
		ensures m != null;
		ensures	m.valid;
		ensures acc(m.keys,  50);
		ensures acc(m.height,50);
		ensures acc(m.balanceFactor,50);
		ensures m.height == 1;
		ensures |m.keys| == 1;
		
		ensures (r==null?nil<int>:r.keys) ++ m.keys == old(keys);
		ensures r!=null ==> forall k in r.keys :: k < m.keys[0];
	{
		unfold valid;
//		assert |keys|==1 <==> height==1;
		if (right==null){
			r := left;
			left := null;
			call close();
			m := this;
			assert r!=null ==> forall k in r.keys :: k < m.keys[0];
		}else{
			var nr : AVLTreeNode;
			assert unfolding right.valid in |right.keys|==1 <==> right.height==1;
			call nr,m := right.pruneMax();
			right := nr;
			var bf : int;
			call bf := getBalanceFactorI();
			if (bf == 2){
				call r:=rebalanceLeft();
			}else{
				call close();
				r := this;
			}
			assert r!=null ==> forall k in r.keys :: k < m.keys[0];
		}
	}
	
	//////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////
	method pruneMin() returns ( r : AVLTreeNode, m : AVLTreeNode )
		requires valid;
		requires acc(keys,  50);
		requires acc(height,50);
		requires acc(balanceFactor,50);

		ensures r != null ==> r.valid;
		ensures r != null ==> acc(r.keys,  50);
		ensures r != null ==> acc(r.height,50);
		ensures r != null ==> acc(r.balanceFactor,50);
		ensures r != null ==> (r.height == old(height) || r.height == old(height)-1);
		ensures r !=null ==> |r.keys|+1 == |old(keys)|;
		ensures old(height) >1 ==> r != null;
		ensures old(height)==1 ==> r == null;
		ensures old(height)==(r==null?0:r.height) || old(height)==(r==null?0:r.height)+1;
		
		ensures m != null;
		ensures	m.valid;
		ensures acc(m.keys,  50);
		ensures acc(m.height,50);
		ensures acc(m.balanceFactor,50);
		ensures m.height == 1;
		ensures |m.keys| == 1;
		
		ensures m.keys ++ (r==null?nil<int>:r.keys) == old(keys);
		ensures r!=null ==> forall k in r.keys :: m.keys[0] < k;
	{
		unfold valid;
		if (left==null){
			r := right;
			right := null;
			call close();
			m := this;
			assert r!=null ==> (r.height == old(height) || r.height == old(height)-1);
			assert r!=null ==> forall k in r.keys :: m.keys[0] < k;
		}else{
			var nl : AVLTreeNode;
			call nl,m := left.pruneMin();
			left := nl;
			var bf : int;
			call bf := getBalanceFactorI();
			if (bf == -2){
				call r:=rebalanceRight();
				assert r != null ==> (r.height == old(height) || r.height == old(height)-1);
			}else{
				call close();
				r := this;
				assert r != null ==> (r.height == old(height) || r.height == old(height)-1);
			}
			assert r!=null ==> forall k in r.keys :: m.keys[0] < k;
		}
	}
	//////////////////////////////////////////////////////////
	method has(k : int) returns (b : bool)
		requires valid;
		requires rd(keys);

		ensures valid;
		ensures rd(keys);
		ensures b == (k in keys);
	{
		unfold valid;
		if (k==key){
			b := true;
			assert [key][0]==k;
		}else{ //k!=key
			if (k < key){
				if (left!=null){
					call b := left.has(k);
				}else{
					b := false;
				}
			}else{ //k > key;
				if (right!=null){
					call b := right.has(k);
				}else{
					b := false;
				}
			}
		}
		fold valid;
	}

	//////////////////////////////////////////////////////////
	method getBalanceFactor() returns ( bf : int ) 
		requires valid;
		requires rd(balanceFactor);

		ensures valid;
		ensures rd(balanceFactor);
		ensures bf == balanceFactor;

		ensures unfolding valid in bf>0 ==> left !=null;
		ensures unfolding valid in bf<0 ==> right!=null;
	{
		unfold valid;
		var lh : int := (left ==null ? 0 : left .height );
		var rh : int := (right==null ? 0 : right.height );
		bf := lh-rh;

//		assume bf>0 ==> left!=null;
//		assume bf<0 ==> right!=null;

		fold valid;
	}

	//////////////////////////////////////////////////////////
	method getBalanceFactorI() returns ( bf : int ) 
		requires rd(left);
		requires left!=null ==> left.valid;
		requires left!=null ==> rd(left.height);

		requires rd(right);
		requires right!=null ==> right.valid;
		requires right!=null ==> rd(right.height);

		ensures rd(left);
		ensures left!=null ==> left.valid;
		ensures left!=null ==> rd(left.height);

		ensures rd(right);
		ensures right!=null ==> right.valid;
		ensures right!=null ==> rd(right.height);

		ensures bf == (left==null?0:left.height)-(right==null?0:right.height);
		ensures bf>0 ==> left !=null;
		ensures bf<0 ==> right!=null;
	{
		var lh : int := (left ==null ? 0 : left .height );
		var rh : int := (right==null ? 0 : right.height );
		bf := lh-rh;
		assert right!=null ==> unfolding right.valid in right.height>0;
		assert left !=null ==> unfolding left .valid in left .height>0;
		assert lh>=0;
		assert rh>=0;
//		assume bf>0 ==> left !=null;
//		assume bf<0 ==> right!=null;
	}

	//////////////////////////////////////////////////////////
	method close()
		requires acc(key   ,100);
		requires acc(height,100);
		requires acc(left  ,100);
		requires acc(right ,100);

		requires acc(keys         ,100);
		requires acc(balanceFactor,100);

		requires left!=null ==> left.valid;
		requires left!=null ==> acc(left.height       ,50);
		requires left!=null ==> acc(left.keys         ,50);
		requires left!=null ==> acc(left.balanceFactor,50);
		requires left!=null ==> forall k in left.keys :: k < key;

		requires right!=null ==> right.valid;
		requires right!=null ==> acc(right.height       ,50);
		requires right!=null ==> acc(right.keys         ,50);
		requires right!=null ==> acc(right.balanceFactor,50);
		requires right!=null ==> forall k in right.keys :: key < k;

		requires ( left==null ? 0 : left.height )-( right==null ? 0 : right.height ) <= 1;
		requires ( left==null ? 0 : left.height )-( right==null ? 0 : right.height ) >=-1;

		ensures valid;
		ensures acc(height       ,50);
		ensures acc(keys         ,50);
		ensures acc(balanceFactor,50);

		ensures keys == 
			( old(left)==null ? nil<int> : old(left.keys) ) ++ [old(key)] ++ ( old(right)==null ? nil<int> : old(right.keys) );
			
		ensures height == 
			( ( old(left)==null ? 0 : old(left.height) )>( old(right)==null ? 0 : old(right.height) ) 
				? 
					( old(left)==null ? 0 : old(left.height) )+1 
				: 
					( old(right)==null ? 0 : old(right.height))+1
			);
		ensures balanceFactor == 
			( old(left)==null ? 0 : old(left.height) )-( old(right)==null ? 0 : old(right.height) );
	{
		var lh : int := (left ==null ? 0 : left .height );
		var rh : int := (right==null ? 0 : right.height );
		
		assert left !=null ==> unfolding left .valid in left .height>0;
		assert right!=null ==> unfolding right.valid in right.height>0;
		height := ( (( left==null ? 0 : left.height )>( right==null ? 0 : right.height )) ? ( left==null ? 0 : left.height )+1 : ( right==null ? 0 : right.height )+1);
		
		balanceFactor := ( left==null ? 0 : left.height )-( right==null ? 0 : right.height );
		keys          := ( left==null ? nil<int> : left.keys ) ++ [key] ++ ( right==null ? nil<int> : right.keys );
//		assert [key][0] == key;
		fold valid;
	}
	
	//////////////////////////////////////////////////////////
	method rebalanceLeft() returns ( r : AVLTreeNode )
		requires acc(key   ,100);
		requires acc(height,100);
		requires acc(left  ,100);
		requires acc(right ,100);

		requires acc(keys         ,100);
		requires acc(balanceFactor,100);

		requires left!=null;
		requires left.valid;
		requires acc(left.height       ,50);
		requires acc(left.keys         ,50);
		requires acc(left.balanceFactor,50);
		requires forall k in left.keys :: k < key;

		requires right!=null ==> right.valid;
		requires right!=null ==> acc(right.height       ,50)
		requires right!=null ==> acc(right.keys         ,50)
		requires right!=null ==> acc(right.balanceFactor,50)
		requires right!=null ==> forall k in right.keys :: key < k;
		
		requires left.height-(right==null?0:right.height)==2;

		ensures r.valid;
		ensures acc(r.height       ,50);
		ensures acc(r.keys         ,50);
		ensures acc(r.balanceFactor,50);

		ensures r.height == old(left.height) || r.height == old(left.height)+1;
		ensures r.keys == old(left.keys) ++ [old(key)] ++ ( old(right)==null ? nil<int> : old(right.keys) );
	{
		var lbf : int;
		call lbf := left.getBalanceFactor();
		if (lbf<0){
			assert unfolding left.valid in lbf==-1;
			call r := rebalanceRL();
		}else{//lbf>=0
			call r := rebalanceRR();
		}
	}

//////////////////////////////////////////////////////////
	method rebalanceRL() returns ( r : AVLTreeNode )
		requires acc(key   ,100);
		requires acc(height,100);
		requires acc(left  ,100);
		requires acc(right ,100);

		requires acc(keys         ,100);
		requires acc(balanceFactor,100);

		requires left!=null;
		requires left.valid;
		requires acc(left.height       ,50);
		requires acc(left.keys         ,50);
		requires acc(left.balanceFactor,50);
		requires forall k in left.keys :: k < key;

		requires right!=null ==> right.valid;
		requires right!=null ==> acc(right.height       ,50)
		requires right!=null ==> acc(right.keys         ,50)
		requires right!=null ==> acc(right.balanceFactor,50)
		requires right!=null ==> forall k in right.keys :: key < k;
		
//		requires unfolding left.valid in left.right!=null;

		requires left.height-(right==null?0:right.height)==2;
		requires left.balanceFactor==-1;

		ensures r.valid;
		ensures acc(r.height       ,50);
		ensures acc(r.keys         ,50);
		ensures acc(r.balanceFactor,50);

		ensures r.height == old(left.height);
		ensures r.keys == old(left.keys) ++ [old(key)] ++ ( old(right)==null ? nil<int> : old(right.keys) );
	{
		assert forall k in left.keys :: k < key;
		unfold left.valid;
		r := left.right;
		assert forall k in r.keys :: k < key;
		unfold r.valid;
		
		assert r.right!=null ==> forall k in r.right.keys :: k < key;

		left.right := r.left;
		call left.close();
		r.left     := left;
		left       := r.right;
		
		assert left!=null ==> forall k in left.keys :: k < key;
		call close(); 
		r.right    := this;
		call r.close();
	}



//////////////////////////////////////////////////////////
	method rebalanceRR() returns ( r : AVLTreeNode )
		requires acc(key   ,100);
		requires acc(height,100);
		requires acc(left  ,100);
		requires acc(right ,100);

		requires acc(keys         ,100);
		requires acc(balanceFactor,100);

		requires left!=null;
		requires left.valid;
		requires acc(left.height       ,50);
		requires acc(left.keys         ,50);
		requires acc(left.balanceFactor,50);
		requires forall k in left.keys :: k < key;

		requires right!=null ==> right.valid;
		requires right!=null ==> acc(right.height       ,50)
		requires right!=null ==> acc(right.keys         ,50)
		requires right!=null ==> acc(right.balanceFactor,50)
		requires right!=null ==> forall k in right.keys :: key < k;
		
		requires left.height - (right==null?0:right.height)==2;
		requires left.balanceFactor>=0;


		ensures r.valid;
		ensures acc(r.height       ,50);
		ensures acc(r.keys         ,50);
		ensures acc(r.balanceFactor,50);

		ensures r.height == old(left.height) || r.height == old(left.height)+1;
		ensures r.keys == old(left.keys) ++ [old(key)] ++ ( old(right)==null ? nil<int> : old(right.keys) );
	{
		unfold left.valid;
		r       := left;
		left    := r.right;
		call close();
		r.right := this;
		call r.close();
	}

	//////////////////////////////////////////////////////////
	method rebalanceRight() returns ( r : AVLTreeNode )
		requires acc(key   ,100);
		requires acc(height,100);
		requires acc(left  ,100);
		requires acc(right ,100);

		requires acc(keys         ,100);
		requires acc(balanceFactor,100);

		requires left!=null==>left.valid;
		requires left!=null==>acc(left.height       ,50);
		requires left!=null==>acc(left.keys         ,50);
		requires left!=null==>acc(left.balanceFactor,50);
		requires left!=null==>forall k in left.keys :: k < key;

		requires right!=null;
		requires right.valid;
		requires acc(right.height       ,50)
		requires acc(right.keys         ,50)
		requires acc(right.balanceFactor,50)
		requires forall k in right.keys :: key < k;
		

		requires (left==null?0:left.height)-right.height==-2;

		ensures r.valid;
		ensures acc(r.height       ,50);
		ensures acc(r.keys         ,50);
		ensures acc(r.balanceFactor,50);

		ensures r.height == old(right.height) || r.height == old(right.height)+1;
		ensures r.keys == (old(left)==null?nil<int>:old(left.keys)) ++ [old(key)] ++ old(right.keys);
	{
		var rbf : int;
		call rbf := right.getBalanceFactor();
		if (rbf>0){
			assert unfolding right.valid in rbf==1;
			call r := rebalanceLR();
		}else{//rbf<=0
			call r := rebalanceLL();
		}
	}

//////////////////////////////////////////////////////////
	method rebalanceLR() returns ( r : AVLTreeNode )
		requires acc(key   ,100);
		requires acc(height,100);
		requires acc(left  ,100);
		requires acc(right ,100);

		requires acc(keys         ,100);
		requires acc(balanceFactor,100);

		requires left!=null==>left.valid;
		requires left!=null==>acc(left.height       ,50);
		requires left!=null==>acc(left.keys         ,50);
		requires left!=null==>acc(left.balanceFactor,50);
		requires left!=null==>forall k in left.keys :: k < key;

		requires right!=null;
		requires right.valid;
		requires acc(right.height       ,50);
		requires acc(right.keys         ,50);
		requires acc(right.balanceFactor,50);
		requires forall k in right.keys :: key < k;
		
		requires unfolding right.valid in right.left!=null;

		requires (left==null?0:left.height)-right.height==-2;
		requires right.balanceFactor==1;

		ensures r.valid;
		ensures acc(r.height       ,50);
		ensures acc(r.keys         ,50);
		ensures acc(r.balanceFactor,50);

		ensures r.height == old(right.height);
		ensures r.keys == (old(left)==null?nil<int>:old(left.keys)) ++ [old(key)] ++ old(right.keys);
	{
		assert forall k in right.keys :: key < k;
		unfold right.valid;
		r := right.left;
		assert forall k in r.keys :: key < k;
		unfold r.valid;
		assert r.left!=null ==> forall k in r.left.keys :: key < k;
		right.left := r.right;
		call right.close();
		r.right    := right;
		right      := r.left;
		assert right!=null ==> forall k in right.keys :: key < k;
		call close();
		r.left     := this;
		call r.close();
	}



//////////////////////////////////////////////////////////
	method rebalanceLL() returns ( r : AVLTreeNode )
		requires acc(key   ,100);
		requires acc(height,100);
		requires acc(left  ,100);
		requires acc(right ,100);

		requires acc(keys         ,100);
		requires acc(balanceFactor,100);

		requires left!=null==>left.valid;
		requires left!=null==>acc(left.height       ,50);
		requires left!=null==>acc(left.keys         ,50);
		requires left!=null==>acc(left.balanceFactor,50);
		requires left!=null==>forall k in left.keys :: k < key;

		requires right!=null;
		requires right.valid;
		requires acc(right.height       ,50);
		requires acc(right.keys         ,50);
		requires acc(right.balanceFactor,50);
		requires forall k in right.keys :: key < k;
		
		requires (left==null?0:left.height)-right.height==-2;
		requires right.balanceFactor<=0;

		ensures r.valid;
		ensures acc(r.height       ,50);
		ensures acc(r.keys         ,50);
		ensures acc(r.balanceFactor,50);

		ensures r.height == old(right.height) || r.height == old(right.height)+1;
		ensures r.keys == (old(left)==null?nil<int>:old(left.keys)) ++ [old(key)] ++ old(right.keys);
	{
		unfold right.valid;
		r       := right;
		right    := r.left;
		call close();
		r.left := this;
		call r.close();
	}
}