// @IgnoreFile
// VariableExpr is currently not supported in Syxc due to changes made
// when introducing the tuple representation (w, r) of permissions
// as part of the work on immutability.

class Test {
	var x: int
	
	/*
	 * Constant fractions
	 */
	 
	method reqSucceedLowerBound()
		requires acc(x, 0) 
		requires acc(x, 1)
	{}
	
	method reqSucceedUpperBound()
		requires acc(x, 99)
		requires acc(x, 100)
	{}
	
	method ensSucceedLowerBound()
		requires acc(x)
		ensures acc(x, 0)
      /* TODO: Chalice reports "permission might not be positive".
       *       Should Syxc do the same?
       */
		ensures acc(x, 1)
	{}
	
	method ensSucceedUpperBound1()
		requires acc(x)
		ensures acc(x, 99)
	{}
	
	method ensSucceedUpperBound2()
		requires acc(x)
		ensures acc(x, 100)
	{}	

	method assSucceedLowerBound()
		requires acc(x)
	{
		assert(acc(x, 0))
      /* TODO: Chalice reports "permission might not be positive".
       *       Should Syxc do the same?
       */
	  assert(acc(x, 1))
	}
	
	method assSucceedUpperBound()
		requires acc(x)
	{
		assert(acc(x, 99))
		assert(acc(x, 100))
	}
	
	method reqFailLowerBound()
		requires acc(x, -1) /* @Error 130 */
	{}

  /* @deprecated: <=100 Check is no longer done by Chalice or Syxc. */
	// method reqFailUpperBound()
		// requires acc(x, 101) /* @Error 140 */
	// {}
	
	method ensFailLowerBound()
		ensures acc(x, -1) /* @Error 130 */
	{}
	
  /* @deprecated: <=100 Check is no longer done by Chalice or Syxc. */
	// method ensFailUpperBound()
		// ensures acc(x, 101) /* @Error 140 */
	// {}
	
	method assFailLowerBound()
		requires acc(x)
	{ assert(acc(x, -1)) /* @Error 130 */ }
	
	/*
	 * Variable fractions
	 */
	 
	method reqSucceedVarBounds(a: int)
		requires a >= 0
		requires a <= 100
		requires acc(x, a)
	{}
	
	method ensSucceedVarBounds(a: int)
		requires acc(x)
		requires a >= 0
		requires a <= 100
		ensures acc(x, a)
	{}
	
	method assSucceedVarBounds(a: int)
		requires acc(x)
		requires a >= 0
		requires a <= 100
	{ assert(acc(x, a)) }
	 
	method reqVarFailLowerBound(a: int)
		requires a <= 100
		requires acc(x, a) /* @Error 130 */
	{}
	
	method reqVarFailUpperBound(a: int)
		requires a >= 0
		requires acc(x, a) /* @Error 140 */
	{}
	
	method ensVarFailLowerBound(a: int)
		requires a <= 100
		requires acc(x, a) /* @Error 130 */
	{}
	
	method ensVarFailUpperBound(a: int)
		requires a >= 0
		ensures acc(x, a) /* @Error 140 */
	{}
	
	method assVarFailLowerBound(a: int)
		requires a <= 100
		requires acc(x)
	{ assert(acc(x, a)) /* @Error 130 */ }
}