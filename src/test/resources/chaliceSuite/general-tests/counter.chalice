class Counter {
  var value: int;

  invariant acc(value) /*&& old(value)<=value*/;  // rely-guarantee is not supported in /Chalice2Silver/issue/57/
}

class Program {

  method main1(){
    var counter := new Counter;
    counter.value := 0;
    share counter;

    acquire counter;
    var tmp1 := counter.value;
    release counter;

    acquire counter;
    var tmp2 := counter.value;
    release counter;

    //:: UnexpectedOutput(assert.failed:assertion.false, /Chalice2Silver/issue/57/)
    assert tmp1 <= tmp2;  // rely-guarantee is not supported in /Chalice2Silver/issue/57/
  }

  method main2(){
    var counter := new Counter;
    counter.value := 0;
    share counter;

    acquire counter;
    release counter;
  }

  method main4(){
    var counter := new Counter;
    counter.value := 0;
    share counter;

    acquire counter;
    counter.value := counter.value - 1;
    release counter;  // error: should fail
  }

  method nestedGood0(c: Counter)
    requires c != null && acc(c.mu) && waitlevel << c.mu;
  {
    lock (c) {
      release c
      acquire c
    }
  }

  method nestedGood1(c: Counter)
    requires c != null && acc(c.mu) && waitlevel << c.mu;
  {
    var t: Counter := c
    lock (t) {
      t := new Counter
      share t
      acquire t
    }
  
    //:: UnexpectedOutput(fold.failed:insufficient.permission, /Chalice2Silver/issue/58/)
    release t
  }

  method nestedBad0(c: Counter)
    requires c != null && acc(c.mu) && waitlevel << c.mu;
  {
    //:: ExpectedOutput(fold.failed:insufficient.permission)
    lock (c) {
      release c
    }  // error: no longer holds c
  }

  method nestedBad1(c: Counter)
    requires c != null && acc(c.mu) && waitlevel << c.mu;
  {
    lock (c) {
      acquire c  // error: already holds c
    }
  }

  method nestedBad2(c: Counter)
    requires c != null && acc(c.mu) && waitlevel << c.mu;
  {
    lock (c) {
      lock (c) {  // error: already holds c
      }
    }
  }

  method nestedBad3(c: Counter)
    requires c != null && acc(c.mu) && waitlevel << c.mu;
  {
    var t: Counter := c
    lock (t) {
      release t
      t := new Counter
      share t
      acquire t
    }  // error: this line attempts to release the original t
  }
}
