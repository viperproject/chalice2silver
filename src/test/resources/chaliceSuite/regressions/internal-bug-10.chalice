/* Recursive implementation and specification of a linked list. */

class Node {
  var next: Node;
  var value: int;

  method init(v: int)
    requires acc(next) && acc(value);
    ensures valid && size() == 1 && (forall y:int :: contains(y) <==> y==v);
  {
    next := null;
    value := v;
    fold this.valid;
  }

  method add(x: int)
    requires valid;
    ensures valid;
    ensures size() == old(size())+1;
    //:: UnexpectedOutput(postcondition.violated:assertion.false, /Silicon/issue/113/)
    //:: UnexpectedOutput(postcondition.violated:assertion.false, /Carbon/issue/55/)
    ensures (forall y:int :: contains(y)==(old(contains(y)) || x==y));  // Silicon issue 113
  {
    unfold this.valid;
    if(next==null) {
      var n : Node;
      n := new Node;
      call n.init(x);
      next := n;
    } else {
      call next.add(x);
    }
    fold this.valid;
  }

  function size(): int
    requires valid;
    ensures result > 0
  {
    unfolding this.valid in (next!=null ? 1+ next.size() : 1)
  }

  function contains(i:int):bool
    requires valid
  {
    unfolding valid in i==value || (next!=null && next.contains(i))
  }

  predicate valid {
    acc(next) && acc(value) && (next!=null ==> next.valid)
  }
}
