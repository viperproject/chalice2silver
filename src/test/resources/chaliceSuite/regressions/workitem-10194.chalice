class Test {
  var x: int
  var tk: token<Test.incX>
  
  predicate V { acc(x) }
  
  method incX()
    requires V
    ensures V
  {
    unfold V
    x := x + 1
    fold V
  }
  
  method joinTk()
    requires acc(tk) && tk != null && acc(tk.joinable) && tk.joinable
    // requires eval(tk.fork this.incX(), true)
    ensures V
    //:: ExpectedOutput(not.wellformed:insufficient.permission)
    ensures unfolding V in x == old(x) // ERROR: old(x) is not readable (no error here, previously)
  {
    //:: ExpectedOutput(inhale.failed:insufficient.permission)
    //:: MissingOutput(assert.failed:assertion.false, /Silicon/issue/34/)
    join tk
    assert V
  }

  method test()
    requires acc(x) && x == 0
    requires acc(tk)
  {
    fold V
    fork tklocal := incX()
    tk := tklocal
    //:: UnexpectedOutput(call.precondition:insufficient.permission, /Silicon/issue/152/)
    call joinTk()
    unfold V
    //:: ExpectedOutput(assert.failed:assertion.false)
    //:: MissingOutput(assert.failed:assertion.false, /Silicon/issue/34/)
    assert x == old(x) // this verified previously (without any errors anywhere in the file)
  }
}
