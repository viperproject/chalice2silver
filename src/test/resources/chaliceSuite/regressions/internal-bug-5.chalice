class Cell  {
  var x: int;
  var b: bool;

  predicate valid {
    acc(this.b) && (this.b ==> acc(this.x,50))
  }

  method m()
    requires this.valid && (unfolding valid in this.b) && acc(this.mu) && waitlevel << mu
  {
    acquire this;
    var c := (unfolding valid in this.x);
    release this;

    acquire this;
    //:: UnexpectedOutput(assert.failed:assertion.false, /Silicon/issue/119/)
    assert c == this.x;  // silicon issue 119
    call n();
    c := (unfolding valid in this.x);
    release this;

    acquire this;
    //:: ExpectedOutput(assert.failed:assertion.false)
    //:: MissingOutput(assert.failed:assertion.false, /Silicon/issue/34/)
    assert c == this.x;
    release this;
  }

  method n()
    requires this.valid
    ensures this.valid
  {
    unfold this.valid;
    this.b := false;
    fold this.valid;
  }

  invariant acc(this.x,50)
}

