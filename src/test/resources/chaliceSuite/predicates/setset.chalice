class Node {
  var value: int;

  method init(v: int)
    requires acc(value)
    ensures valid
  {
    value := v
    fold this.valid
  }
  
  function get():int requires valid { unfolding valid in value }
  
  method _set(v: int)
    requires valid
    ensures valid && get() == v
  {
    unfold valid
    value := v
    fold valid
  }
  
  predicate valid {
    acc(value)
  }
  
  method main(x: Node, y: Node)
    requires x != null && y != null
    requires x.valid && y.valid
  {
    call x._set(3)
    call y._set(3)
    call x._set(3)
    call y._set(3)
    call x._set(3)
    call y._set(3)
    call x._set(3)
    unfold x.valid
    x.value := 3
    fold x.valid
    call y._set(3)
    call x._set(3)
    call y._set(3)
    unfold x.valid
    x.value := 3
    fold x.valid
    unfold x.valid
    x.value := 3
    fold x.valid
    call x._set(3)
    call y._set(3)
    call x._set(4)
    
    assert y.get() == 3
	//:: ExpectedOutput(assert.failed:assertion.false)
    assert x.get() == 3 // error: should fail
  }
}