class List
{
  var value:int;
  var next:List;
  predicate valid { acc(value) && acc(next) && (next!=null ==> next.valid) }
 
  method _set(x:int, y:int) requires valid; ensures valid; {}
}

class C
{
  method M (x:List, y:List)
    requires x!=null && y!=null && x!=y && x.valid && y.valid;
  {
    var i: int := unfolding x.valid in x.value;
    var j: int := unfolding y.valid in y.value;
    call y._set(0,10);
    assert unfolding x.valid in (i == x.value); // succeeds
	//:: ExpectedOutput(assert.failed:assertion.false)
    assert unfolding y.valid in (j == y.value); // correctly fails to verify
 }
}