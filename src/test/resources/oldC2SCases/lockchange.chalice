//:: ExpectedOutput(chalice2sil.error)
/* There has been an incompleteness due to the previous handling of mu-fields
 * and waitlevel-assertions. This incompleteness has been removed by also 
 * versioning mu-fields.
 *
 * I haven't removed the descriptions below to keep a description of what 
 * failed, and why, in case the current encoding still isn't complete or if
 * somebody wants to modify it.
 */

class Cell { var x: int}

class ProblemA {
	method acqThis()
		requires rd(mu) && waitlevel << mu
		//:: ExpectedOutput(chalice2sil.error)
		ensures holds(this)
		lockchange this
	{ acquire this }
	
	method test() /* Previously failed  */
		requires rd(mu) && waitlevel << mu
	{
		call acqThis()
		release this
	}
}

class ProblemB {
  var c: Cell
  invariant rd(c) && c != null && rd(c.mu) && rd(this.mu) && this << c
  // invariant rd(c) // && c != null && rd(c.mu) && rd(this.mu) && this << c
	
	/* Same problem here: Updating c.mu destroys the link between pre-state
 	 * and post-state, therefore the verification fails.
	 * Looks like mu terms, e.g. mu(c) = tc, must also be versioned.
	 * Questions:
	 *   - When is the version incremented?
	 *   - When do we add 'mu(c, v) = m' terms to Ï€?
	 * Both times: when we produce a mu-chunk?
	 */
  method test() /* Previously failed  */
    requires rd(mu) && waitlevel << this
		/* Taken from the invariant. Using this clause makes the method verify. */
		// requires rd(c) && c != null && rd(c.mu) && this << c
    ensures rd(mu)
  {
    acquire this
	//:: ExpectedOutput(chalice2sil.error)
		assert !holds(c)
		assert this.mu == waitlevel
    acquire c
    release c
    release this
  }
}

class SimpleTest {
	method test() /* @Error 340 */
		requires rd(mu) && waitlevel << this
	{ acquire this }
}