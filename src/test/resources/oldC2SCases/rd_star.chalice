// @Ignore (unknown cause, but possibly related to other issues which should be fixed first, see issue 13 of chalice2sil)
class Star {
	var x: int
	
	predicate P { rd*(x) }
	
	method rdStar()
		requires acc(x)
		ensures rd*(x)
	{}
	
	method consumeRdX()
    requires rd(x)
  {}
	
	method consumeRdStarX()
    requires rd*(x)
  {}
	
  // method substract1()
    // requires rd(x, *)
    // ensures rd(x, *)
  // {
		// call consumeRdX()
			// /* Syxc:
			 // * Raises an exception because only star epsilons may be 
			 // * substracted from star epsilons in order to ensure that the loss of
			 // * star epsilons is permanent (since they are never gained back again).
			 // * 
			 // * Otherwise, it would be possible to split star epsilons into n epsilons,
			 // * where n is the number internally used to represent star epsilons, and
			 // * to merge these with the original full access from which the star
			 // * epsilons have been substracted, thereby restoring full access although
			 // * the star epsilons are also still available.
			 // */
	// }
	
  method substract2()
    requires rd*(x)
    ensures rd*(x)
  { call consumeRdStarX() }
	
	// method substract3()
		// requires P
		// ensures P && rd(x)
	// {
		// unfold P
		// fold P
	// }
	
  // method add1()
    // requires rd(x, *) && rd(x)
    // ensures rd(x, *)
  // { }
	
	// method add2()
		// requires P // && rd(x)
			// /* Will break folding because star-eps are never added, hence
			 // * unfolding 'loses' the permissions and the subsequent fold fails.
			 // */
		// ensures P
	// {
		// unfold P
		// fold P
	// }
	
	/* The next two fail because star-eps are never added.
	 * This is an incomplete, but sound handling of star-eps.
	 */
	
	method substract4()
		requires acc(x)
		ensures acc(x) /* @Error 330 */
	{
		fork t := substract2()
	}
	
	method substract5()
		requires acc(x)
		ensures acc(x) /* @Error 330 */
	{
		fork t := substract2()
		join t
	}
}

class ScaleStar {
	var x: int
	
	predicate P1 { acc(x) }
	predicate P2 { rd*(x) }
	
	method testP1_1()
		requires acc(x)
		ensures rd*(P1)
	{ fold rd*(P1) }
	
	method testP1_2()
		requires rd(x)
		ensures rd*(P1)
	{ fold rd*(P1) }
	
	method testP1_3()
		requires rd*(x)
		ensures rd*(P1)
	{ fold rd*(P1) }
	
	method testP2_1()
		requires acc(x)
		ensures rd*(P2)
	{ fold rd*(P2) }
	
	method testP2_2()
		requires rd(x)
		ensures rd*(P2)
	{ fold rd*(P2) }
	
	method testP2_3()
		requires rd*(x)
		ensures rd*(P2)
	{ fold rd*(P2) }
}