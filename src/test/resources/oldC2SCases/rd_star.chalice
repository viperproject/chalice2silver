class Star {
	var x: int
	
	predicate P { rd*(x) }
	
	method rdStar()
		requires acc(x)
		ensures rd*(x)
	{}
	
	method consumeRdX()
    requires rd(x)
  {}
	
  method consumeRdStarX()
    requires rd*(x)
  {}
	
   method substract1()
     requires rd*(x)
     ensures rd*(x)
   {
		call consumeRdX()
   }
	
  method substract2()
    requires rd*(x)
    ensures rd*(x)
  { call consumeRdStarX() }
	
	method substract3()
		requires P
		//:: ExpectedOutput(postcondition.violated:insufficient.permission)
		ensures P && rd(x)
	 {
	 unfold P
	 fold P
	 }
	
   method add1()
     requires rd*(x) && rd(x)
     ensures rd*(x)
   { }
	
	method add2()
	 requires P && rd(x)
			
	 ensures P
	{
		unfold P
		fold P
	}
	
		
	method substract4()
		requires acc(x)
		//:: ExpectedOutput(postcondition.violated:insufficient.permission)
		ensures acc(x) /* @Error 330 */
	{
		fork t := substract2()
	}
	
	method substract5()
		requires acc(x)
		//:: ExpectedOutput(postcondition.violated:insufficient.permission)
		ensures acc(x) /* @Error 330 */
	{
		fork t := substract2()
		join t
	}
}
