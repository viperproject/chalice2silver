class Node {
  var next: Node
  invariant acc(next)
  invariant acc(mu,50) && (next != null ==> acc(next.mu,50) && this << next)
}

class List {
  var head: Node
  invariant acc(head) && head != null
  invariant rd(mu) && acc(head.mu,50) && this << head

  method iterate()
    requires rd(mu) && waitlevel << this
    ensures rd(mu)
  {
    acquire this
    assert waitlevel == this.mu;
    var p: Node := head
    acquire p
    release this

    //:: ExpectedOutput(chalice2silver.error)
    while (p.next != null) 
      invariant p != null && acc(p.next) && acc(p.mu,50)
      //:: ExpectedOutput(chalice2silver.error)
      invariant holds(p)
      invariant waitlevel == p.mu
      //:: ExpectedOutput(chalice2silver.error)
      invariant !old(holds(p)) && !old(rd holds(p))
      invariant p.next != null ==> acc(p.next.mu,50) && p << p.next
	  lockchange p //, this
    {
      assert p.mu == waitlevel
      var nx: Node := p.next
      acquire nx
      assert nx.mu == waitlevel
      assert p.mu << nx.mu
      release p
      assert nx.mu == waitlevel
      p := nx
    }

		assert p.next == null
		
    var t := new Node
    t.next := p.next
    // share t between p and p.next
    share t above p

    p.next := t
    release p
  }
}
