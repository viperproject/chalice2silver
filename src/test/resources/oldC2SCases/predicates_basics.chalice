class Predicate {
	var x: int

	predicate V {
		acc(x)
	}
	

	
	method foldV()
		requires acc(x)
		ensures V
	{ fold V }
	
	method failFoldV1()
	//:: ExpectedOutput(fold.failed:insufficient.permission)
	{ fold V /* @Error 730 */ }
	
	method failFoldV2()
		requires acc(x)
		ensures V
		//:: ExpectedOutput(postcondition.violated:insufficient.permission)
		ensures acc(x) /* @Error 330 */
	{ fold V }
	
	
	
	method unfoldV()
		requires V
		ensures acc(x)
	{ unfold V }
	
	method failUnfoldV1()
	//:: ExpectedOutput(unfold.failed:insufficient.permission)
	{ unfold V /* @Error 830 */}
	
	method failUnfoldV2()
		requires V
		ensures acc(x)
		//:: ExpectedOutput(postcondition.violated:insufficient.permission)
		ensures V /* @Error 330 */
	{ unfold V }
	

	
	function unfoldingV(): int
		requires V
	{ unfolding V in x }
	
	//:: ExpectedOutput(function.not.wellformed:insufficient.permission)
	function failUnfoldingV(): int
	{ unfolding V in x }
	
	
	
	method useUnfoldingV() returns (r: int)
		requires acc(x)
		ensures acc(x) && r == x
	{
		fold V
		r := unfoldingV()
		unfold V
	}
	
	method failUseUnfoldingV() returns (r: int)
		requires acc(x)
		ensures acc(x) && r == x
		//:: ExpectedOutput(application.precondition:insufficient.permission)
	{ r := unfoldingV()	/* @Error 230 */ }
}