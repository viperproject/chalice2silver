class Test {
	var x: int
	
	predicate P { acc(x) }
	
	method fail10()
		requires P
		ensures P
		//:: ExpectedOutput(not.wellformed:insufficient.permission)
    //:: MissingOutput(not.wellformed:insufficient.permission, /Carbon/issue/53/)
		ensures unfolding P in x == old(x) /* @Error 830 */
	{}
	
	method success10()
		requires P
		ensures P
		//:: UnexpectedOutput(postcondition.violated:assertion.false, /Carbon/issue/59/)
		ensures unfolding P in x == old(unfolding P in x)
	{}
	
	method success2()
		requires acc(x)
		ensures P
		ensures unfolding P in x == old(x)
	{
		fold P
	}
	
	method fail5()
		requires P
		ensures P
		//:: ExpectedOutput(not.wellformed:insufficient.permission)
    //:: MissingOutput(not.wellformed:insufficient.permission, /Carbon/issue/53/)
		ensures unfolding P in x == old(x) + 1 /* @Error 830 */
	{
		unfold P
		x := x + 1
		fold P
	}
	
	method success5()
		requires P
		ensures P
		//:: UnexpectedOutput(postcondition.violated:assertion.false, /Carbon/issue/59/)
		ensures unfolding P in x == old(unfolding P in x) + 1
	{
		unfold P
		x := x + 1
		fold P
	}	
	
	method success4()
		requires acc(x)
		ensures P
		ensures unfolding P in x == old(x) + 1
	{
		x := x + 1
		fold P
	}	
	
	method fail1()
		requires acc(x)
		ensures P
		//:: ExpectedOutput(not.wellformed:insufficient.permission)
    //:: MissingOutput(not.wellformed:insufficient.permission, /Carbon/issue/53/)
		//:: UnexpectedOutput(postcondition.violated:assertion.false, /Carbon/issue/59/)
		ensures unfolding P in x == old(unfolding P in x) /* @Error 830 */
	{
    fold P
  }
	
	method fail2()
		requires acc(x)
		ensures P
		//:: ExpectedOutput(postcondition.violated:assertion.false)
		ensures unfolding P in x == old(x) /* @Error 310 */
	{
		x := 0
		fold P
	}
}
