//:: IgnoreFile(/silicon/issue/21/)

class Cell { var x: int }

class Test {
	method lockchangeOld(c: Cell)
		requires c != null && rd(c.mu)
		requires !holds(c) ==> waitlevel << c.mu
		ensures old(holds(c)) == !holds(c)
		lockchange c
	{ if (holds(c)) { release c } else { acquire c } }
	

	method waitlevelOld3()
		ensures waitlevel == old(waitlevel)
	{}
	
	method waitlevelOld1() returns (c: Cell)
		lockchange c
		ensures c != null && holds(c)
		ensures old(waitlevel) == waitlevel 
		ensures old(waitlevel) << waitlevel 
	{
		c := new Cell
		share c
		acquire c
	}
}