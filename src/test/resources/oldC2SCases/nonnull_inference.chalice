//:: IgnoreFile(/silicon/issue/21/)
  // chalice2silver issue 21 includes the fact that channels are not supported
class Cell {
	var c: Cell
	var v: int
	
	function f(): bool { true }
	
	predicate P { acc(c) && acc(v) }
}

channel Ch(c: Cell) where rd(c.v) && c.v > 0

class Tests {
	method accV(c: Cell)
		requires acc(c.v)
		ensures acc(c.v)
	{ assert c != null }
	
	method rdMu(c: Cell)
		requires rd(c.mu)
		ensures rd(c.mu)
	{ assert c != null }
	
	method accP(c: Cell)
		requires c.P
		ensures c.P
	{ assert c != null }
	
	method fails1(c: Cell)
	{ call accV(c) /* @Error 205 */ }
	
	method fails2(c: Cell)
	{ call rdMu(c) /* @Error 205 */ }
	
	method fails3(c: Cell)
	{ call accP(c) /* @Error 205 */ }
	
	method succeeds1()
	{
		var c: Cell	:= new Cell
		call accV(c)
		call rdMu(c)
		fold c.P
		call accP(c)
	}
	
	method twoCredits(ch: Ch)
		requires credit(ch, 2)
	{ assert ch != null }
	
	method fails4(ch: Ch)
	{ call twoCredits(ch) /* @Error 205 */}
	
	method succeeds3()		
	{
		var ch: Ch := new Ch
//		var c: Cell := new Cell
//		c.v := 22
//		send ch(c)
//		send ch(c)
//
//		call twoCredits(ch)
	}
	
	method createCell() returns (c: Cell)
		ensures rd(c.v) && c.v > 0
	{
		c := new Cell
		c.v := 1
	}
	
	method succeeds4()
	{
		var c: Cell
		call c := createCell()
		assert c != null && c.v > 0
	}
	
	method fails5() returns (c: Cell)
		ensures rd(c.v) /* @Error 305 */
	{}
}

class WhileTests {
  method succeeds1() {
    var c: Cell := new Cell
    var d: Cell := new Cell
    
    while (c.f())
    { var b: bool := d.f() }
  }
  
  method succeeds2() {
    var c: Cell := new Cell
    var d: Cell := new Cell
    c.c := d
    
    while (c.c.f())
      invariant rd(c.c) && c.c != null
    { var b: bool := c.c.f() }
  }

  method succeeds3() {
    var c: Cell := new Cell
    while (c.f())
      invariant rd(c.c)
    { c := c }
  }    
	
	method succeeds4(c: Cell)
		requires c != null && acc(c.c) && (c.c != null ==> acc(c.c.v))
	{
		// while (c.c != null && (c.c != null ==> c.c.v > 0)) /* Workaround */
		while (c.c != null && c.c.v > 0)
			/* 2011-10-05 MHS:
			 *   Used to fail in Syxc when producing the negated loop guard
			 *   after the loop, e.g. when evaluating !(c.c == null && c.c.v <= 0).
			 *   Overcame incompleteness by introducing non-strict conjunction
			 *   evaluation.
			 */

			invariant c != null && acc(c.c)
			invariant c.c != null ==> acc(c.c.v)
		{}
		
		// assert c.c == null || c.c.v <= 0
	}
	
	method succeeds5(c: Cell)
		requires c != null && acc(c.c) && (c.c != null ==> acc(c.c.v))
	{
		// if (c.c != null && (c.c != null ==> c.c.v > 0)) {} /* Workaround */
		if (c.c != null && c.c.v > 0) {}
			/* 2011-10-05 MHS: See comment above */
		
		// assert c.c == null || c.c.v <= 0
	}
  
  method fails4() {
    var c: Cell := new Cell
    
    while (c.f())
      invariant rd(c.c)
    {
			assert c != null
			var b: bool := c.c.f() /* @Error 205 */
		}
  }
  
  method fails5() {
    var c: Cell := new Cell
    var d: Cell := new Cell
    c.c := d
    
    while (c.c.f()) /* @Error 205 */ 
      invariant rd(c.c)
    { var b: bool := c.c.f() }
  }    
  
  method fails1() {
    var c: Cell := new Cell
    while (c.f()) /* @Error 205 */ 
    { c := c }
  }
  
  method fails2() {
    var c: Cell := new Cell    
    c := null
    while (c.f()) {} /* @Error 205 */ 
  }
  
  method fails3() {
    var c: Cell := new Cell
    var d: Cell := new Cell
    
    d := null
    while (c.f())
    { var b: bool := d.f() } /* @Error 205 */ 
  }
}