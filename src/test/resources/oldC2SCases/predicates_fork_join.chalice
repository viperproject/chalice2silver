class Test {
	var x: int

	predicate V { acc(x) }
	predicate W { rd(x) }
	predicate P { acc(x, 50) }

	method f()
		requires rd(x)
		ensures rd(x)
	{}
	
	method g()
		requires V
		ensures V
	{}
	
	method h()
		requires acc(x, 50)
		ensures acc(x, 50)
	{}	
	
	method unfoldVRd()
		requires V
		ensures V
	{
		call g()
		unfold rd(V)
		fork tk1 := f()
		join tk1
		fold rd(V)
		call g()
	}
	
  
	method fail1UnfoldVRd()
		requires V
	{
		call g()
		unfold rd(V)
		fork tk1 := f()
		fork tk2 := f()
	}		
	
	method fail2UnfoldVRd()
		requires V
	{
		call g()
		unfold rd(V)
		fork tk1 := f()
		//:: ExpectedOutput(call.precondition:insufficient.permission)
		call g() /* @Error 230 */
	}	

}