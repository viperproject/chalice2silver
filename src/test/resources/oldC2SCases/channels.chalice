//:: IgnoreFile(/Silicon/issue/3/)
  // Channels are not supported yet.  When they are, the specific example should be rewritten in the new obligations model
  
class C {
  var f: int;
  
  predicate P { rd(f) }
  
  method t1(ch: C1)
    requires ch != null && rd(f);
    ensures true;
  {
    //:: UnexpectedOutput(chalice2sil.error, /silicon/issue/3/)
    send ch(this) /* @Error 2130 */
  }
  
  method t1a(ch: C1)
    requires ch != null && acc(f, 2 * rd(P));
  {
    //:: UnexpectedOutput(chalice2sil.error, /silicon/issue/3/)
    send ch(this)
	//:: UnexpectedOutput(chalice2sil.error, /silicon/issue/3/)
    send ch(this)
	//:: UnexpectedOutput(chalice2sil.error, /silicon/issue/3/)
    send ch(this) /* @Error 2130 */
  }
  
  method t2(ch: C1)
    requires ch != null && acc(f);
    ensures true;
  {
    //:: UnexpectedOutput(chalice2sil.error, /silicon/issue/3/)
    send ch(this)
  }
  
  method t3(ch: C2)
    requires ch != null && rd(f);
    ensures rd(f); /* @Error 330 */
  {
    //:: UnexpectedOutput(chalice2sil.error, /silicon/issue/3/)
    send ch(this)
  }
  
  method t4(ch: C1, a: C) returns (b: C)
    requires ch != null && credit(ch, 1) && rd(ch.mu) && waitlevel << ch;
    ensures rd*(b.f);
  {
    //:: UnexpectedOutput(chalice2sil.error, /silicon/issue/3/)
    receive b := ch
  }
  
  method t5(ch: C1)
    requires ch != null && acc(f);
    ensures true;
  {
    //:: UnexpectedOutput(chalice2sil.error, /silicon/issue/3/)
    send ch(this)
	//:: UnexpectedOutput(chalice2sil.error, /silicon/issue/3/)
    send ch(this)
	//:: UnexpectedOutput(chalice2sil.error, /silicon/issue/3/)
    send ch(this)
  }
  
}

channel C1(x: C) where rd(x.f);
channel C2(x: C) where rd*(x.f);
