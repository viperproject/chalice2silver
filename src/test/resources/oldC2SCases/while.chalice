class Test {
	var x: int
	
	method simpleWhile(a: int)
		requires acc(x)
		ensures acc(x) && x >= a
	{
		while(x < a)
			invariant acc(x)
		{			
			x := x + 1
		}
	}
	
	method guardInvOrderProblem()
		requires acc(x)
	{
		var a: bool := true

		while (a && x > 0)
			invariant a ==> acc(x)
		{ a := false }
	}
	
	method takenFromChaliceTestSuite(p: Test)
    requires p != null && rd(p.mu)
		requires rd(mu)
	{
		var b: bool
    var current: Test := this
    while(b)
      invariant b ==> rd(p.mu)
    {
      current := p
      b := false
			
      assert current != null && rd(current.mu)
      assert b ==> rd(p.mu)
    }
	}	
	
	method failNoAcc(a: int)
		requires acc(x)
		ensures acc(x) && x >= a
	{
	    //:: ExpectedOutput(while.failed:insufficient.permission)
		while(x < a) { /* @Error 1030 */
			x := x + 1
		}
	}
	
	method preserveOuterVar() {
		var t: int := 1
		var d: int := 0

		while(d < 5) {
			d := d + t
		}

		assert t == 1
	}
	
	method failPreserveOuterVar1() {
		var t: int := 0

		while(t < 5) {
			t := t + 1
		}

		//:: ExpectedOutput(assert.failed:assertion.false)
		assert t == 0 /* @Error 410 */
	}
	
	method failPreserveOuterVar2() {
		var t: int := 0
		var d: int := 0

		while(d < 5) {
			if (d != 4) {
				d := d + 1
			} else {
				t := d + 1
				d := t
			}
		}
        //:: ExpectedOutput(assert.failed:assertion.false)
		assert t == 0 /* @Error 410 */
	}
	
	method multiply(a: int, b: int) returns (r: int)
		requires b >= 0
		ensures r == a*b
	{
		var n: int := b
		r := 0
		while(n > 0)
			invariant r == a * (b - n) && n >= 0
		{
			r := r + a
			n := n - 1
		}
	}
	
	method failMultiplyEstablishInv(a: int, b: int) returns (r: int)
		requires b >= 0
		ensures r == a*b
	{
		var n: int := b
		r := 1
		while(n > 0)
		    //:: ExpectedOutput(invariant.not.established:assertion.false)
			invariant r == a * (b - n) && n >= 0 /* @Error 2010 */
		{
			r := r + a
			n := n - 1
		}
	}	
	
	method failMultiplyPreserveInv(a: int, b: int) returns (r: int)
		requires b >= 0
		ensures r == a*b
	{
		var n: int := b
		r := 0
		while(n > 0)
		    //:: ExpectedOutput(invariant.not.preserved:assertion.false)
			invariant r == a * (b - n) && n >= 0 /* @Error 1910 */
		{
			r := r + b
			n := n - 1
		}
	}
	
	method failMultiplyWeakInv(a: int, b: int) returns (r: int)
		requires b >= 0
		ensures r == a*b
	{
		var n: int := b
		r := 0
		while(n > 0)
			invariant r == a * (b - n)
		{
			r := r + a
			n := n - 1
		}
        //:: ExpectedOutput(assert.failed:assertion.false)
		assert r == a*b; /* @Error 310 */
	}
	
	method partialCorrectness() {
		var t: int := 0
		var b: int := 0

		while(b < 5) {
			t := t + 1
		}

		assert t == 0 /* Holds since we only verify partial correctness. */
	}
}