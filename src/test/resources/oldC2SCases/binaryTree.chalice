class Node {
    var l : Node;
    var r : Node;

    method work(data : Data) returns (y : int)
        requires valid;
        requires rd(data.f);
        ensures rd(data.f);
        ensures data.f <= y;
        ensures valid;
    {
        unfold valid;
        if(l != null && r != null) {
            var yl : int;
            fork tk := l.work(data);
            call yr := r.work(data);
            join yl := tk;
            y := yl + yr;
        } else if(r != null) {
            call y := r.work(data);
        } else if(l != null) {
            call y := l.work(data);
        } else {
            // perform some work on data
            y := data.f;
        }
        fold valid;
    }

    predicate valid {
        rd(l) && rd(r)
        && (l != null ==> l.valid)
        && (r != null ==> r.valid)
    }
}

class Main {
    method main(tree : Node)
        requires tree != null && tree.valid
        ensures tree.valid
    {
        var data : Data := new Data { data.f := 1 }
        call y := tree.work(data);
        assert data.f <= y;
    }
}

class Data {
    var f: int;
}