// syxc-parameters --unrollFunctions 2

class List {
  var value:int;
  var next:List;
  
  predicate inv {
		   acc(value)
		&& acc(next)
		&& (next != null ==> acc(next.inv))
	}
	
	method init(x: int, n: List)
	  requires n != null && acc(n.inv)
		requires acc(value) && acc(next) // && (n != null ==> acc(n.inv))
		ensures inv
		ensures 0 < len()
		ensures get(0) == x
		ensures unfolding inv in next == n
			/* Well-definedness check of the next clauses fails otherwise, because
			 * access to n.inv is not directly given by unfolding this.inv.
			 */
		ensures len() == 1 + unfolding inv in (n == null ? 0 : n.len())
		ensures forall i in [1..len()] :: get(i) == unfolding inv in n.get(i - 1)
		// ensures forall i in [1..len()] :: get(i) == unfolding inv in next.get(i - 1)
	{
		value := x
		next := n
		fold inv
		call lemma_len_positive()
		// assert len() == 1 + (unfolding inv in next.len())
		// assert len() >= 1
		// assert get(0) == x
	}
	
  unlimited function len():int
    requires rd(inv);
  { unfolding rd(inv) in (next==null) ? 1 : (1 + next.len()) }
  // { unfolding rd(inv) in (next!=null) ? (1 + next.len()) : 1 }
  
  unlimited function get(index: int): int
    requires rd(inv)
		requires 0<=index
		requires index<len();
  { unfolding rd(inv) in (index==0) ? value : next.get(index - 1) }
  // { unfolding rd(inv) in (next == null) ? value : next.get(index - 1) }
  
  method set_(index: int, newval: int)
    requires inv && 0 <= index && index < len()
    ensures /* N1 */ inv
		ensures /* N2 */ len() == old(len())
		ensures /* N3 */ get(index) == newval
		ensures /* N4 */ forall i in [0..len()] :: i != index ==> get(i) == old(get(i))
  {
		unfold inv
		
		if(index == 0) {
			value := newval
		} else {
			call next.set_(index - 1, newval)
		}
		
		fold inv;
  }
  
  method append(newval)
    requires inv;
		requires 0 < len()
		ensures /* N1 */ inv
		ensures /* N2 */ len() > 0
		ensures /* N3 */ len() == old(len()) + 1
		ensures /* N4 */ get(len() - 1) == newval
		ensures /* N5 */ forall i in [0..old(len())] :: get(i) == old(get(i))
  {
    var n: List;
    unfold inv;
		
		if(next == null) {
			n:=new List;
			n.value:=newval;
			n.next:=null;
			fold(n.inv);
			next:=n;
			assert next.get(n.len() - 1) == newval /* Enables N2, necessary for N4 */
			// call next.lemma_len_positive() /* Enables N2 */
		} else {
			call next.lemma_len_positive() /* Necessary for next.insert(newval) */
			call next.append(newval);
		}
		
		fold inv		
  }
	
	method lemma_len_positive()
		requires rd(inv)
		ensures rd(inv)
		ensures len() > 0
		// ensures (unfolding rd(inv) in next == null) ? len() == 1 : len() > 0
	{
		unfold rd(inv)
		if (next != null) {
			call next.lemma_len_positive()
		}
		fold rd(inv)
	}
}


class Test {
	var t1: Test
	var t2: Test
	
	predicate P { acc(t1) && (t1 != null ==> acc(t2)) }
	
	method itetest()
		requires acc(t1) && acc(t2)
	{
		t1 := new Test
		fold P
		var n: int := unfolding P in t1 == null ? 22 : 33
		assert n == 33
	}
	
	method testSet() {
		var n1: List := new List
    n1.next := null
		fold n1.inv
		call n1.set_(0, 21)
		//:: ExpectedOutput(assert.failed:assertion.false)
		assert 1234 == 0 /* @Error 410 Simple smoke test */
	}

	method direct() {
		var n1: List := new List
		n1.value := 1
    n1.next := null
		fold n1.inv
		assert n1.len() == 1
		// call n1.lemma_len_positive()
		
		var n2: List := new List
		n2.value := 2
		n2.next := n1
		fold n2.inv
		assert n2.len() == 2
		// call n2.lemma_len_positive()
		
		var n3: List := new List
		n3.value := 3
		n3.next := n2
		fold n3.inv

		assert n3.len() == 3
      /* Fails if function definitions aren't unrolled often enough.
       *
       * [2012-06-22 Malte] The assertion also fails if Syxc is run with
       *                    --disableSubsumption. Probably, because the
       *                    knowledge gained by the preceding len-assertions
       *                    is not kept.
       */

		// call n3.lemma_len_positive()
		// assume n3.len() > 0

		// assert n3.get(0) == 3
		// assert n3.get(1) == 2
		// assert n3.get(2) == 1
		
		//:: ExpectedOutput(assert.failed:assertion.false)
		assert 1234 == 0 /* @Error 410 Simple smoke test */

		// // var n4: List := new List
		// // n4.value := 4
		// // n4.next := n3
		// // fold n4.inv
		// // // call n4.lemma_len_positive()
		// // assume n4.len() > 0

		// // assert n4.get(0) == 4
		// // assert n4.get(1) == 3
		// // assert n4.get(2) == 2
		// // assert n4.get(3) == 1
	}
	
	// method via_init() {
		// var n1: List := new List
		// call n1.init(1, null)
		
			// assert n1.len() == 1
		
		// var n2: List := new List
		// call n2.init(2, n1)
			// assert unfolding n2.inv in n2.next == n1
			// assert unfolding n2.inv in n1.len() == 1
			// assert n2.len() == 2
			// assert n2.get(0) == 2
			// assert n2.get(1) == 1
		
		// var n3: List := new List
		// call n3.init(3, n2)

		// assert n3.get(0) == 3
		// assert n3.get(1) == 2
		// assert n3.get(2) == 1
	// }
	
	// method via_append() returns (n1: List)
		// // ensures n1 != null
		// // ensures n1.inv
		// // ensures n1.len() == 3
		// // ensures n1.get(0) == 1
		// // ensures n1.get(1) == 2
		// // ensures n1.get(2) == 3
	// {
		// n1 := new List
		// // call n1.set(0, 1)
		// n1.value := 1
		// fold n1.inv
		// // assert n1.get(0) == 1
		
		// call n1.append(2)
		// call n1.append(3)
		// // assert n1.get(0) == 1 /* Holds on its own*/
		// // assert n1.get(1) == 2 /* Holds on its own*/
			// /* The assertions make some of the following assertions hold.
			 // * Verify with --disableSubsumption to prevent this.
			 // */
		// // assert forall i in [0..2] :: n1.get(i) == 1 || n1.get(i) == 2 /* Holds on its own*/
		
		// // call n1.append(3)
		
		// // assert n1.len() == 3
		// // assert forall i in [0..3] :: n1.get(i) == 1 || n1.get(i) == 2 || n1.get(i) == 3 /* Fails */
		
		// // assert n1.get(0) == 1 /* Fails */
		// // assert n1.get(1) == 2 /* Fails */
		// assert n1.get(2) == 3 /* Holds */
	// }
}
