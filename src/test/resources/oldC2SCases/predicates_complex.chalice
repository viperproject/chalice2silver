class ComplexPredicates {
	var x: int
	var y: int
	var z: int
	var b: bool
	
	predicate XY { acc(x) && acc(y) }
	predicate Z { acc(z) }
	predicate ZZ { Z }
	
	predicate V { XY && Z }
	predicate W { XY && Z && acc(b) }
	
	predicate P { XY && acc(b) && (b == true ==> Z ) }
	
	method reqxy()
		requires acc(x)
		requires acc(y)
		ensures acc(y) && y == -1
		ensures acc(x) && x == 1
	{
		x := 1
		y := -1
	}
	
	method useXY()
		requires XY
		ensures rd(XY)
		ensures unfolding rd(XY) in x == 22 && y == 3
	{
		unfold XY
		x := 22
		y := 3
		fold rd(XY)
	}
	
	method useZ()
		requires Z
		ensures Z
		ensures unfolding Z in z == z
		//:: ExpectedOutput(not.wellformed:insufficient.permission)	
    //:: MissingOutput(not.wellformed:insufficient.permission, /Carbon/issue/49/)
    ensures unfolding Z in z == old(z)
	{
  }	
	
	method useZZ1()
		requires ZZ
		ensures ZZ
		ensures unfolding ZZ in
			unfolding Z in
				z == z
	  //:: ExpectedOutput(not.wellformed:insufficient.permission)	
    //:: MissingOutput(not.wellformed:insufficient.permission, /Carbon/issue/49/)
		ensures unfolding ZZ in
			unfolding Z in z == old(z)
	{
  }
	
	method useZZ2(a: int)
		requires ZZ
		ensures ZZ
		ensures unfolding ZZ in
			unfolding Z in
				z == a + 1
	{
		unfold ZZ
		unfold Z
		z := a + 1
		fold Z
		fold ZZ
	}
	
	method unfoldingZZ()
		requires ZZ
		ensures ZZ
	{
    var b: bool := unfolding ZZ in unfolding Z in z == z
  }
	
	method failUseZZ()
		requires ZZ
		//:: ExpectedOutput(not.wellformed:insufficient.permission)	
		ensures unfolding ZZ in
			unfolding Z in
				z == old(z)
	{
  }	
	
	method useV()
		requires V
		ensures V
		ensures unfolding V in
			unfolding XY in
				unfolding Z in
					x == 1 && y == 2 && z == 3
	{
		unfold V
		assert(XY)
		assert(Z)
		unfold XY
		unfold Z
		x := 1
		y := 2
		z := 3
		fold Z
		fold XY
		fold V
	}
	
	method fail1UseV()
		requires V
		ensures V
		//:: ExpectedOutput(not.wellformed:insufficient.permission)	
    //:: MissingOutput(not.wellformed:insufficient.permission, /Carbon/issue/49/)
		ensures unfolding V in
			unfolding XY in
				x == 1 && y == 2 && z == 3
	{
		unfold V
		unfold XY
		unfold Z
		x := 1
		y := 2
		z := 3
		fold Z
		fold XY
		fold V
	}
	
	method fail2UseV()
		requires V
		ensures V
		ensures unfolding V in
			unfolding XY in
				x == 1
    //:: ExpectedOutput(not.wellformed:insufficient.permission)				
    //:: MissingOutput(not.wellformed:insufficient.permission, /Carbon/issue/49/)
		ensures y == 2
	{
		unfold V
		unfold XY
		x := 1
		y := 2
		fold XY
		fold V
	}
	
}
