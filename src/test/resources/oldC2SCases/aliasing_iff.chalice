class Cell { var x: int }

class Test {
	var b: bool
	var c: Cell
	var d: Cell

	method succeeds1() returns (r: bool)
		requires rd(c) && rd(d) && rd(b)
		requires c != null && d != null
		requires b <==> c == d
		requires acc(c.x, 50) && acc(d.x, 50)
		ensures rd(c) && rd(d) && rd(b)
		ensures c != null && d != null
		ensures b ==> acc(d.x, 100)
		ensures r == true
	{
		if (b) {
			assert acc(c.x, 100)
		}

		r := b ? c == d : true
	}
	
	method succeeds2() returns (r: bool)
		requires rd(c) && rd(d) && rd(b)
		requires c != null && d != null
		requires b <==> c == d
		requires rd(c.x) && rd(d.x)
		ensures rd(c) && rd(d) && rd(b)
		ensures c != null && d != null
		ensures rd(c.x) && rd(d.x)
		ensures b ==> c.x == d.x
	{}
	
	method fails1() returns (r: bool)
		requires rd(c) && rd(d) && rd(b)
		requires c != null && d != null
		requires b <==> c == d
		requires acc(c.x, 50) && acc(d.x, 50)
		ensures rd(c) && rd(d) && rd(b)
		ensures c != null && d != null
		ensures b ==> acc(d.x, 100)
		//:: ExpectedOutput(postcondition.violated:insufficient.permission)
		ensures b ==> acc(c.x, 100)
		ensures r == true
	{
		if (b) {
			assert acc(c.x, 100)
		}

		r := b ? c == d : true
	}
	
	method fails2() returns (r: bool)
		requires rd(c) && rd(d) && rd(b)
		requires c != null && d != null
		requires b <==> c == d
		requires rd(c.x) && rd(d.x)
		ensures rd(c) && rd(d) && rd(b)
		ensures c != null && d != null
		ensures rd(c.x) && rd(d.x)
		//:: ExpectedOutput(postcondition.violated:assertion.false)
		ensures b <==> c.x == d.x
			/* c.x and d.x might be equal although c != d and hence !b */
	{}
}