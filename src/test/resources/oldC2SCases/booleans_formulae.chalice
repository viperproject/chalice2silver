class BooleansAndOr {
	method deMorgan(x: bool, y: bool) returns (a: bool, b: bool)
		ensures a == !(x && y)
		ensures b == !(x || y)
	{
		a := !x || !y
		b := !x && !y
	}
	
	method associativity(x: bool, y: bool, z: bool) returns (a: bool, b: bool)
		ensures a == ((x && y) || (x && z))
		ensures b == ((x || y) && (x || z))
	{
		a := x && (y || z)
		b := x || (y && z)
	}
	
	method absorb(x: bool, y: bool) returns (a: bool, b: bool)
		ensures a == x
		ensures b == x
	{
		a := x || (x && y)
		b := x && (x || y)
	}
	
	method golden(x: bool, y: bool) returns (a: bool)
		ensures a == true
	{
		a := ((x && y) == x) == (y == (x || y))
	}
	
	method equiv1(x: bool, y: bool) returns (a: bool, b: bool)
		ensures a <==> (x && y)
	{
		a := x && (x <==> y)
	}
	
	method equiv2(x: bool, y: bool, z: bool) returns (a: bool, b: bool)
		ensures a <==> (x ==> (y ==> z))
	{
		a := (x && y) ==> z
	}
	
	method equiv3(x: bool, y: bool) returns (a: bool, b: bool)
		ensures a <==> ((x || y) <==> y)
	{
		a := x ==> y
	}
	
	method failAbsorb(x: bool, y: bool) returns (a: bool, b: bool)
		//:: ExpectedOutput(postcondition.violated:assertion.false)
		ensures b == y
	{
		a := x || (x && y)
		b := x && (x || y)
	}
	
	method failGolden(x: bool, y: bool) returns (a: bool)
	    //:: ExpectedOutput(postcondition.violated:assertion.false)
		ensures a == true
	{
		a := ((x && y) == x) == (y == (x || x))
	}
	
	method failEquiv1(x: bool, y: bool) returns (a: bool, b: bool)
	    //:: ExpectedOutput(postcondition.violated:assertion.false)
		ensures a <==> (x && y)
	{
		a := x || (x <==> y)
	}
}