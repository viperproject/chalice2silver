class Main {
    var f : int;
    method main(){
        var m1 : Main;
        var m2 : Main;

        m1 := new Main;
        m1.f := 3;

        m2 := new Main;
        m2.f := 5;

        share m2;

        share m1 above m2;

        acquire m2;

        m2.f := 13;

        call change(m1,7,m2);

        assert m1.f == 7;
        assert m2.f == 13;

        release m1;
        call dispose(m2);
		//:: ExpectedOutput(fold.failed:insufficient.permission)
        release m2;
    }

    method dispose(m : Main)
        requires rd(m.mu)
        requires acc(m.f)
        ensures rd(m.mu)
    {
        release m;
    }

    invariant acc(f)

    method change(m : Main, n : int, x : Main)
        requires m != null
        requires acc(x.mu)
        requires acc(m.mu)
        requires waitlevel << m.mu
        ensures acc(m.f)
        ensures m.f == n
        ensures acc(x.mu)
    {
        acquire m;
        m.f := n;
    }
}