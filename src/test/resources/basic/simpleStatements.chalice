class C
{
  method m(a: int, b: C) returns(c: seq<C>, d: int)
    requires acc(fld)
  {
    var x: C
	var i: int
	
	x := null
	x := new C
	x.fld := 4
	
	assert acc(x.fld) && x.fld == 4
	assume x.fld == 4
	
	if(x != null) { x:= new C }
	if(x != null) { x:= new C } else { x:= null }
	
	c:=nil<C>	
	while(|c|==0)
	  invariant x!=null && acc(x.fld)
	  invariant |c|>=0 && old(c) == nil<C>
	{ d := 1 }
	
	{
	  var fld: int
	  fld := 2
	}
	
	call c, i := m(x.fld+1, this)
  }
  
  method f()
    requires rd(fld) && fld == 1
	ensures rd(fld)
  {
    call f()
	call f()
  }
  
  var fld: int
}