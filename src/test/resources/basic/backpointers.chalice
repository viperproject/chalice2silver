class A {
  tracked var b: B
  
  method m() {
    var a := new A
	assert a.b == null
	var b := new B
	assert b.~(A.b) == empty<A>
	
	a.b := b
	assert b.~(A.b) == {a}
	a.b := b
	assert b.~(A.b) == {a}
	
	a.b := null
	assert b.~(A.b) == empty<A>
	
	var c := new B
	
	a.b := c
	assert c.~(A.b) == {a}
	assert b.~(A.b) == empty<A>
	
	a.b := b
	assert c.~(A.b) == empty<A>
	assert b.~(A.b) == {a}
  }
  
  method fails(a: A, b: B)
    requires a != null && acc(a.b)
  {
    //:: ExpectedOutput(assignment.failed:insufficient.permission)
    a.b := b
  }
  
  method fails1(a: A, b: B)
    requires a != null && acc(a.b) && acc((a.b).~(A.b))
  {
    //:: ExpectedOutput(assignment.failed:insufficient.permission)
    a.b := b
  }
}

class B {}