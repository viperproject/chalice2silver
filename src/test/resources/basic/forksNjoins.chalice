class D
{
  var x: D
  
  method goo() {
    var a: int
	var b: seq<int>
	
    fork t := x.x.foo(15, empty<D>, nil<D>)
	fork u := goo()
	fork t := x.foo(1, {this}, nil<D>)
	join a, b:= t
	join u
  }
  
  method foo(x: int, y: set<D>, z: seq<D>) returns (r:int, s: seq<int>)
    requires rd(this.x) && x > 0 && |y|==|z|
	requires x > 2 && z[1] in y && acc(this.x.x.x)
	ensures rd(this.x) && s == [r, r] && old(this.x) == this
	ensures old(this.x.x.x.x) == this && r == 10
  {
    fork t := this.x.x.foo(15+x, {this.x}, [this.x, this.x.x])
  }
  
  method hoo(e: E)
  {
    fork t := e.hoo(this)
  }
}

class E
{
  method hoo(d: D)
  {
    fork t := d.goo()
	join t
  }
}

