//:: IgnoreFile(/Chalice2Silver/issue/38/)

class D
{
  var x: D

  method goo() {
    var a: int
    var b: seq<int>

    //:: ExpectedOutput(assignment.failed:insufficient.permission)
    fork t := x.x.foo(15, empty<D>, nil<D>)   // see Chalice2sil issue 38 on why this erroneous statement triggers an "assignment failed" error message by Silicon
    fork u := goo()
    fork t := x.foo(1, {this}, nil<D>)
    join a, b:= t
    join u
  }

  method foo(x: int, y: set<D>, z: seq<D>) returns (r:int, s: seq<int>)
    requires rd(this.x) && x > 0 && |y|==|z| && this.x != null
    requires x > 2 && z[1] in y && acc(this.x.x)
    ensures rd(this.x) && s == [r, r] && old(this.x) == this
    ensures old(this.x.x) == this && r == 10
  {
    //:: ExpectedOutput(assignment.failed:receiver.null)
    fork t := this.x.foo(15+x, {this.x}, [this.x, this.x])   // see Chalice2sil issue 38 on why this erroneous statement triggers an "assignment failed" error message by Silicon
  }

  method hoo(e: E)
  {
    //:: ExpectedOutput(exhale.failed:assertion.false)
    fork t := e.hoo(this)
  }
}

class E
{
  method hoo(d: D)
  {
    //:: ExpectedOutput(exhale.failed:assertion.false)
    fork t := d.goo()
    join t
  }
}

