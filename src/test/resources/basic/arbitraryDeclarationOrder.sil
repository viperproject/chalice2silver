domain GlobalKPermission {
  
  unique function globalK$(): Perm
  
  axiom globalKReadOnly {
    (globalK$() > none) && (write > globalK$())
  }
}

var old$methodPermission: Perm

var joinable$: Bool

var Dc$: Ref

var Cx$: Int

var par$Dm$this$_1: Ref

var par$Dm$k$: Perm

var par$Cm$this$_6: Ref

var par$Cm$k$_1: Perm

var par$Cn$this$_7: Ref

var par$Cn$k$_2: Perm

function Cg$(this$_3: Ref): Bool
  requires this$_3 != null
  requires acc(Cp$(this$_3), wildcard) && (unfolding acc(Cp$(this$_3), wildcard) in this$_3.Cx$ > 0)
{
  (unfolding acc(Cp$(this$_3), wildcard) in Cf$(this$_3))
}

function Cf$(this$_5: Ref): Bool
  requires this$_5 != null
  requires acc(this$_5.Cx$, wildcard)
{
  this$_5.Cx$ > 10
}

predicate D$MonitorInvariant(this$: Ref) {
  true
}

predicate C$MonitorInvariant(this$_2: Ref) {
  true && acc(Cp$(this$_2), write) && acc(this$_2.Cx$, 50 / 100)
}

predicate Cp$(this$_4: Ref) {
  acc(this$_4.Cx$, 50 / 100) && Cf$(this$_4)
}

method Dm$(this$_1: Ref, k$: Perm)
  requires this$_1 != null
  requires k$ > none
  requires write > k$
  requires acc(this$_1.Dc$, write) && (this$_1.Dc$ != null) && acc(Cp$(this$_1.Dc$), write)
{
  var n$: Ref
  inhale acc(C$MonitorInvariant(this$_1.Dc$), write)
  unfold acc(C$MonitorInvariant(this$_1.Dc$), write)
  fold acc(C$MonitorInvariant(this$_1.Dc$), write)
  exhale acc(C$MonitorInvariant(this$_1.Dc$), write)
}

method Cm$(this$_6: Ref, k$_1: Perm)
  requires this$_6 != null
  requires k$_1 > none
  requires write > k$_1
{
  var n$_1: Ref
  inhale acc(C$MonitorInvariant(this$_6), write)
  unfold acc(C$MonitorInvariant(this$_6), write)
  unfold acc(Cp$(this$_6), write)
  this$_6.Cx$ := 2
  fresh(newK$) {
    Cn$(this$_6, newK$)
  }
  fold acc(Cp$(this$_6), write)
  fold acc(C$MonitorInvariant(this$_6), write)
  exhale acc(C$MonitorInvariant(this$_6), write)
}

method Cn$(this$_7: Ref, k$_2: Perm)
  requires this$_7 != null
  requires k$_2 > none
  requires write > k$_2
{
  var n$_2: Ref
  fresh(newK$_1) {
    Cm$(this$_7, newK$_1)
  }
}
