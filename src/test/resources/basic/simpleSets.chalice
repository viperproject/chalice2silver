class A
{
  tracked ghost var p: A
}

class B
{
  method m(x:A)
	requires (x.p).~(A.p) == ~(A.p)
	requires {x} == {x}
	requires {1} > {x}
	requires {x} < {1}
    ensures {x} >= empty<A>
	ensures empty<A> != empty<C>
	ensures (x.p).~(A.p) + ~(A.p) == (x.p).~(A.p)
	ensures 1 + {x} == 2
	ensures {x} + 1 == 2
	ensures !({{}} + {{1}} <= {{1,2}})
  {
    assert {} == empty<int>
	assert {2} * {x} == {}
	assert {2} + {x} != {x}
	assert {x} == {2} - {x}
	assert {x} >= empty<A> && {1, 2, 3}+empty<int> <= {0,1,2,3,4,5,6}  <==> true
	assert 1 in 1 && {1} in {1}
	assert 1 in {1} && true in {true}
	assert 1 !in 1 && {1} !in {1}
	assert 1 !in {1} && true !in {true}
	
	assert |[1..3]| == |{1,2,3}|
	assert |1| == |x|
	assert |{{1,2}}| + |nil<A>| == 1
  }
}

