class A
{
}

class B
{
  method m(x:A)
	requires {x} == {x}
	requires {1} > {1}
	requires {1} < {1}
    ensures {x} >= empty<A>
	ensures empty<int> != {1,2}
	ensures !({empty<int>} + {{1}} <= {{1,2}})
  {
	assert {2} * {3} == {}
	assert {2} + {3} != {2}
	assert {3} == {3,2} - {2,2}
	assert {x} >= empty<A> && {1, 2, 3}+empty<int> <= {0,1,2,3,4,5,6}
	assert 1 in {1} && true in {true}
	assert 1 !in {1} && true !in {true}
	
	assert |[1..3]| == |{1,2}|
	assert |{{1,2}}| + |nil<A>| == 1
  }
}

