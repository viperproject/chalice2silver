class Cell { var x: int }

class Test {
	method lockchangeOld(c: Cell)
		requires c != null && rd(c.mu)
		requires !holds(c) ==> waitlevel << c.mu
		ensures old(holds(c)) == !holds(c)
		lockchange c
	{ if (holds(c)) { release c } else { acquire c } }
	
	/* TODO: Syxc currently neither supports 'waitlevel == waitlevel'
	 *       nor 'old(waitlevel)'.
	 */
	// method waitlevelOld3()
		// ensures waitlevel == old(waitlevel)
	// {}
	
	method waitlevelOld1() returns (c: Cell)
		lockchange c
		ensures c != null && holds(c)
		// ensures old(waitlevel) == waitlevel /* FAILS */
		// ensures old(waitlevel) << waitlevel /* Chalice: Boogie errors */
	{
		c := new Cell
		share c
		acquire c
	}

	// method waitlevelOld2(c: Cell)
		// requires c != null && acc(c.mu) && c.mu == lockbottom
		// ensures holds(c) && old(waitlevel) << waitlevel
		// lockchange c
	// {
		// share c
		// acquire c
	// }
	
  // method whileOld() {
    // var c := new Cell
    // share c
    // acquire c
    // var s := true
    // while (s) 
      // invariant rd(c.mu)
      // invariant holds(c) && waitlevel == c.mu
      // lockchange c
    // {
      // release c
      // acquire c
      // s := false
    // }
    // assert holds(c)
    // release c
  // }
	
  // method failWhileOld() {
    // var c := new Cell
    // share c
    // acquire c
    // while (true)
      // invariant rd(c.mu)
      // invariant holds(c)
      // lockchange c
    // {
      // release c
      // acquire c /* @Error 1280 */
    // }
  // }	
}