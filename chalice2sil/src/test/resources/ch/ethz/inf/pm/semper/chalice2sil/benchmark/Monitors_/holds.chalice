class Cell { var x: int }

class Test1 {
	var c: Cell
	
	method uncertainty1()
		requires rd(c) && c != null
	{ assert holds(c) } /* @Error 410 */

	method uncertainty2()
		requires rd(c) && c != null
	{ assert !holds(c) } /* @Error 410 */
	
	method succeed()
		requires acc(c) && c != null && acc(c.mu)
		requires waitlevel << c.mu
	{
		acquire c
		assert holds(c)
		release c
		assert !holds(c)
	}
	
	method succeedRd()
		requires acc(c) && c != null && acc(c.mu)
		requires waitlevel << c.mu
	{
		rd acquire c
		assert rd holds(c)
		rd release c
		assert !rd holds(c)
	}
	
	method fails1()
		requires acc(c) && c != null && acc(c.mu)
		requires waitlevel << c.mu
	{
		acquire c
		release c
		assert holds(c) /* @Error 410 */
	}
	
	method fails2()
		requires acc(c) && c != null && acc(c.mu)
		requires waitlevel << c.mu
	{
		acquire c
		assert rd holds(c) /* @Error 410 */
	}	
	
	method failsRd1()
		requires acc(c) && c != null && acc(c.mu)
		requires waitlevel << c.mu
	{
		rd acquire c
		rd release c
		assert rd holds(c) /* @Error 410 */
	}

	method failsRd2()
		requires acc(c) && c != null && acc(c.mu)
		requires waitlevel << c.mu
	{
		rd acquire c
		assert holds(c) /* @Error 410 */
	}
	
	method fails3(c1: Cell, c2: Cell)
		requires c1 != null && c2 != null
		requires rd(c1.mu) && rd(c2.mu)
		requires holds(c1) && holds(c2)
	{
		assert waitlevel == c1.mu /* @Error 410 */
				|| waitlevel == c2.mu
				|| c1.mu << c2.mu
				|| c2.mu << c1.mu
				|| c1.mu == c2.mu
	}
	
	method succeedHolds1(c1: Cell)
		requires c1 != null && rd(c1.mu) && holds(c1)
		lockchange c1
	{ release c1 }
	
	method succeedHolds2(c1: Cell)
		requires c1 != null && rd(c1.mu) && rd holds(c1)
		lockchange c1
	{ rd release c1 }
	
	method failsHolds1(c1: Cell)
		requires c1 != null && rd(c1.mu)
	{ release c1 } /* @Error 1346 */
	
	method failsHolds2(c1: Cell)
		requires c1 != null && rd(c1.mu) && holds(c1)
	{
		release c1
		acquire c1 /* @Error 1280 */
	}	
	
	method failsHolds4(c1: Cell)
		requires c1 != null && rd(c1.mu) && holds(c1)
	{ rd release c1 } /* @Error 1346 */
	
	method failsHolds3(c1: Cell, c2: Cell)
		requires c1 != null && c2 != null
		requires acc(c1.mu) && acc(c2.mu)
		requires holds(c1) && holds(c2)
	{
		release c1
		release c2
		acquire c2 /* @Error 1280 */
	}
	
	method failsHolds5(c1: Cell, c2: Cell)
		requires c1 != null && c2 != null
		requires rd(c1.mu) && rd(c2.mu)
		requires holds(c1) && holds(c2)
	{
		release c1
		release c2 /* @Error 1346 */
	}
	
	method succeedNotHolds1(c1: Cell)
		requires c1 != null && rd(c1.mu)
		requires waitlevel << c1.mu
		ensures c1 != null && rd(c1.mu)
	{
		assert !holds(c1)
		acquire c1
		release c1
		assert !holds(c1)
	}
}



class Test2 {
	method localVar() {
		var t: Test2 := new Test2
		share t
		acquire t
		unshare t
	}
	
	method failsLocalVar() { /* @Error 340 */
		/* Fails in Syxc and Chalice.
		 * Should holds since t is local and never given away.
		 */
		var t: Test2 := new Test2
		share t
		acquire t
	}	
	
	method localVarConfuse() {
		call localVar()
		var t: Test2 := new Test2
		call localVar()
		share t
		call localVar()
		acquire t
		call localVar()
		unshare t
	}

	method succeeds(t1: Test2, t2: Test2)
		requires t1 != null && rd(t1.mu) && waitlevel << t1.mu
		requires t2 != null && rd(t2.mu) && t1.mu << t2.mu
	{
		acquire t1
		acquire t2
		release t1
		release t2
	}	
	
	method fails(t1: Test2, t2: Test2) /* @Error 340 */
		requires t1 != null && rd(t1.mu) && waitlevel << t1.mu
		requires t2 != null && rd(t2.mu) && t1.mu << t2.mu
	{
		acquire t1
		acquire t2
		release t1
	}
}



class Test3 {
	method reqHoldsThenRelease(c: Cell)
		requires c != null && holds(c)
		ensures !holds(c)
		lockchange c
	{ release c }
	
	method failsReqHoldsThenRelease(c: Cell) /* @Error 340 */
		requires c != null && holds(c)
		ensures !holds(c)
	{ release c }	
	
	method acquireThenEnsHolds(c: Cell)
		requires c != null && rd(c.mu) && waitlevel << c.mu
		ensures holds(c)
		lockchange c
	{ acquire c }
	
	method failsAcquireThenEnsHolds(c: Cell) /* @Error 340 */
		requires c != null && rd(c.mu) && waitlevel << c.mu
		ensures holds(c)
	{ acquire c }
	
	method lockchange1(c: Cell)
		requires c != null && rd(c.mu) && holds(c) && c.mu == waitlevel
		lockchange c
	{
		assert !(waitlevel << c.mu)
		release c
		assert waitlevel << c.mu
		acquire c
	}
	
	method lockchange2(c: Cell)
		requires c != null && rd(c.mu) && holds(c) && c.mu == waitlevel
		lockchange c
	{}
	
	method produceLockchange(c: Cell)
		requires c != null && holds(c)
		lockchange c
	{ call reqHoldsThenRelease(c)	}
	
	method failsProduceLockchange(c: Cell) /* @Error 340 */
		requires c != null && holds(c)
	{
		call reqHoldsThenRelease(c)
		assert !holds(c)
	}
}