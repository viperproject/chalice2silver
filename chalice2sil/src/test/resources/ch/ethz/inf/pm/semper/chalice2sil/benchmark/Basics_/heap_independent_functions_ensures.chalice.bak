class Functions {
	function square(x: int): int { x * x }
	
	function div(x: int, y: int): int
		requires y > 0
	{ x / y }
	
	function ternary(b: bool, x: int, y: int): int {
		b ? x : y
	}
	
	method argsCallsSquare1(x: int, y: int, z: int)
		requires x == y
		requires z != x && z != 0
		ensures square(x) == square(y)
		ensures square(-x) == square(y)
		ensures square(-x) == square(x)
		ensures square(x) == x * x
		ensures square(x) == square(z) ==> x == -z
		ensures square(z) != 0
	{	}
	
	method argsCallsSquare2(x: int, y: int, z: int) returns (r: int)
		requires x == y
		requires z != x && z != 0
		ensures r == square(x + square(y + square(z)))
	{
		var x2: int := x*x
		var y2: int := y*y
		var y3: int := y*y2
		var y4: int := y2*y2
		var z2: int := z*z
		var z4: int := z2*z2
		var z6: int := z2*z2*z2
		var z8: int := z4*z4
		
		r := x2 + 2*x*y2 + 4*x*y*z2 + 2*x*z4 + y4 + 4*y3*z2 + 6*y2*z4 + 4*y*z6 + z8
	}
	
	// method argsCallsDiv(x: int, y: int, z: int)
		// requires x == y
		// requires x > 0 && z > 0
		// ensures div(x, y) == div(y, x)
		// ensures div(x, y) != div(-x, y)
		// // ensures div(x, y) == 1 /* Should verify: Try again with Z3 2.16 */
		// // ensures div(x*z, z) == x /* Should verify: Try again with Z3 2.16 */
		// // ensures x > z ? div(x, z) >= 1 : div(x, z) == 0 /* Should verify: Try again with Z3 2.16 */
	// { }
	
	method argsComplexCalls(x: int, y: int, z: int)
		requires x == y
		requires z != x && z != 0
		// ensures x > z && z > 0 ==> div(square(x), square(z)) >= 1 /* Should verify: Try again with Z3 2.16 */
		ensures x > z && z > 0 ==> square(x) > square(z)
		ensures x > z && z > 0 ==> square(x + 2) > square(z + div(6, 3))
		ensures ternary(square(x) > square(y), 1, -1) == -square(1)
		ensures y > 0 ==> div(x, y) != div(-x, y)
		ensures y > 0 ==> div(x, y) == div(y, x)
		ensures y > 0 ==>
				square(ternary(div(x, y) == div(-x, y), 1, -1)) == 1
		ensures y > 0 ==>
				square(ternary(div(x, y) == div(-x, y), 1, -1))
					==
				-ternary(div(x, y) == div(y, x), -1, 1)
	{ }
	
	method failArgsCallsSquare1(x: int, y: int)
		requires x == y
		ensures square(x) != square(y) /* @Error 310 */
	{ }
	
	method failArgsCallsSquare2(x: int, y: int)
		requires x == y
		ensures square(-x) != square(y) /* @Error 310 */
	{}

	method failArgsCallsSquare3(x: int)
		requires x < 0
		ensures square(x) < x /* @Error 310 */
	{}

	/* SHOULD fail.
	 * However, Z3 (tested with 2.15, 2.16) is yet not able to always determine 
	 * this, sometimes it works, sometimes Z3 gets stuck and doesn't terminate 
	 * or times out after an eternity.
	 * According to Christoph Wintersteiger this is due to the heuristics that
	 * guide Z3 internally.
	 */
	// method failArgsCallsSquare4(x: int, y: int, z: int)
		// requires x == y
		// requires z != x && z != 0
	// {
		// var x2: int := x*x
		// var y2: int := y*y
		// var y3: int := y*y2
		// // var y4: int := y2*y2	// Correct
		// var y4: int := y3*y2 	// Incorrect
		// var z2: int := z*z
		// var z4: int := z2*z2
		// var z6: int := z2*z2*z2
		// var z8: int := z4*z4
		
		// assert(square(x + square(y + square(z))) == x2 + 2*x*y2 + 4*x*y*z2 + 2*x*z4 + y4 + 4*y3*z2 + 6*y2*z4 + 4*y*z6 + z8) /* @Error 310 */
	// }
	
	method failArgsCallsDiv0(x: int, y: int)
		requires x == y
		ensures div(x, y) != 1 /* @Error 210 */
	{ }
	
	method failArgsCallsDiv1(x: int, y: int)
		requires x == y && y > 0
		ensures div(x, y) != 1 /* @Error 310 */
	{}
	
	method failArgsCallsDiv2(x: int, y: int)
		requires x == y && x > 0
		ensures div(x, y) != div(y, x) /* @Error 310 */
	{}
	
	method failArgsCallsDiv3(x: int, y: int)
		requires y > 0
		ensures div(x, y) == div(-x, y) /* @Error 310 */
	{}
		
	/* Same here - sometimes Z3 terminates (with the expected result), sometimes
	 * it doesn't.
	 */
	// method failArgsCallsDiv4(x: int, y: int) returns (z: int)
		// ensures z > 0
		// ensures div(x * z, z) != x /* @Error 310 */
	// {
		// if (y == 0) {
			// z := y + 1
		// } else if (y < 0) {
			// z := -y
		// } else {
			// z := y
		// }
	// }
	
	method failArgsComplexCalls1(x: int, z: int)
		requires z != x && z != 0
		ensures x > z && z > 0 ==> div(square(x), square(z)) > 1 /* @Error 310 */
	{}

	method failArgsComplexCalls2(x: int, z: int)
		ensures x > z ==> square(x) > square(z) /* @Error 310 */
	{}
	
	method failArgsComplexCalls3(x: int, y: int)
		requires x == y
		ensures ternary(square(x) > square(y), 1, -1) == square(1) /* @Error 310 */
	{}
		
	method failArgsComplexCalls4(x: int, y: int)
		requires x == y		
		ensures y > 0 ==> div(x, y) == div(-x, y) /* @Error 310 */
	{}

	method failArgsComplexCalls5(x: int, y: int)
		requires x == y
		ensures y > 0 ==>
				ternary(div(x, y) == div(-x, y), 1, -1) == 1 /* @Error 310 */
	{}
	
	method failArgsComplexCalls6(x: int, y: int)
		requires x == y
		ensures y > 0 ==>
				square(ternary(div(x, y) == div(-x, y), 1, -1))  /* @Error 310 */
					==
				ternary(div(x, y) == div(y, x), -1, 1)
	{}
}