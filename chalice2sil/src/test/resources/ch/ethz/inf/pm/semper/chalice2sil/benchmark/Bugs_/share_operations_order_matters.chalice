/* There was a bug in the execution of the share statement, namely that the
 * necessary operations had been executed in the wrong order.
 * When sharing c between lb and ub, the correct proceeding order is:
 *  1. assert c.mu != lockbottom
 *  2. assert l << u forall l in lb, u in ub
 *  3. remove c.mu from h, add fresh c.mu chunk, update mu-function
 *  4. eval and assume l << c && c << u forall l in lb, u in ub
 *  5. consume monitor invariant
 */

class Void {}

class Test {
  var c: Void
  invariant acc(c) && c != null
  invariant rd(mu) && acc(c.mu,50)
	invariant this << c

  method Init()
    requires acc(mu) && mu == lockbottom && acc(c)
  {
    var t := new Void
    share t
    c := t
    share this between waitlevel and t /* Previously failed */
  }
}