class Cell {
	var x: int
	
	predicate P { acc(x) }
	
	method init(y: int)
		requires acc(x)
		ensures P
		ensures get() == y
	{
		this.x := y
		fold P
	}
	
	function get(): int
		requires rd(P)
	{ unfolding rd(P) in x }
}

class CellManager {
	var c: Cell
	
	predicate P {
		   acc(c)
		&& (c != null ==> rd(c.P, *))
	}
	
	method init(x: int)
		requires acc(c)
		ensures P
		ensures get() != null
		ensures rd(get().P)
		ensures get().get() == x
	{
		c := new Cell
		call c.init(x)
		assert c.P
		fold P
		assert unfolding P in c.get() == c.get()
	}
	
	function get(): Cell
		requires rd(P)
			/* Exception in Chalice since scaling non-full permissions is not 
			 * supported yet.
			 */
		// ensures result.P
			/* Chalice: java.lang.AssertionError */
			/* !!! REPORT */
		ensures rd(result.P, *)
	{ unfolding rd(P) in c }
}

class Test {
	method success() {
		var cm: CellManager := new CellManager
		call cm.init(1)
		
		var c: Cell := cm.get()
		assert c.get() == 1
			/* Holds because cm.init(1) ensures some access to cm.get().P */
	}
	
	method fails(cm: CellManager)
		requires cm != null
		requires cm.P
	{
		var c: Cell := cm.get()
		// assert c.get() == c.get()
		  /* Eq. between syntactically equal expressions always holds in Syxc */
		assert c.get() == 0 || c.get() != 0 /* @Fails */
			/* We don't have access to c.P since cm.get() cannot ensure us
			 * access permissions.
			 */
	}
}