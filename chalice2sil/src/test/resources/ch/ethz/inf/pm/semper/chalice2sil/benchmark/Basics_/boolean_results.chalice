class BooleanResults {
	method neg(x: bool) returns (r: bool)
		ensures x != r
	{ r := !x }
	
	method und(x: bool, y: bool, z: bool) returns (r1: bool, r2: bool, r3: bool)
		requires x == true
		requires y == false
		requires z == true
		ensures r1 == false
		ensures r2 == true
		ensures r3 == false
	{
		r1 := x && y
		r2 := x && z
		r3 := y && z
	}
	
	method oder(x: bool, y: bool, z: bool) returns (r1: bool, r2: bool, r3: bool)
		requires x == true
		requires y == false
		requires z == false
		ensures r1 == true
		ensures r2 == true
		ensures r3 == false
	{
		r1 := x || y
		r2 := x || z
		r3 := y || z
	}
	
	method failNeg(x: bool) returns (r: bool)
		ensures x != r /* @Error 310 */
	{ r := x }
	
	method failUnd(x: bool, y: bool) returns (r1: bool)
		requires x == true
		requires y == false
		ensures r1 == true /* @Error 310 */
	{ r1 := x && y }
	
	method failOder(x: bool, y: bool) returns (r1: bool)
		requires x == true
		requires y == false
		ensures r1 == false /* @Error 310 */
	{ r1 := x || y }
}