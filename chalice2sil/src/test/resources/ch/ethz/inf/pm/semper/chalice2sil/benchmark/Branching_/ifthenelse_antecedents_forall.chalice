class Test {
	var next: Test
	
	unlimited function f(i: int): int
	// { i > 0 ? i : f(i + 1) } /* B1 */
	{ 23 }                   /* B2 */
	
	method verify_f() {
		assert forall j: int :: f(j) > 0
			/* Chalice: fails using B1, holds using B2
			 * Syxc: holds using either/or
			 */
	}

	method ifthenelse_next_eq_null()
		requires acc(next)
	{
		next := null
		assume forall j: int :: next == null ? true : f(j) > 0
		assert forall j: int :: next == null ? true : f(j) > 0
		
		next := new Test
		assert forall j: int :: next == null ? true : true     /* Holds */
		assert forall j: int :: next == null ? true : f(j) > 0 /* Holds */

		next := new Test
		assert forall j: int :: next == null ? true : f(j) > 0
		
		next := null
		assert forall j: int :: next == null ? true : f(j) > 0
		
		next := new Test
		assert forall j: int :: next == null ? true : f(j) > 0
	}
	
	method ifthenelse_next_neq_null()
		requires acc(next)
	{
		/* Since this verifies I assume that it is not assigning to 'next' that
		 * destroys the link between the assumed and the asserted expressions.
		 * Furthermore, I assume that the assertion after 'next := null' fails
		 * if we replace 'true' in the if-branch with a function application
		 * similar to f(j).
		 */
		
		next := new Test
		assume forall j: int :: next == null ? true : f(j) > 0
		assert forall j: int :: next == null ? true : f(j) > 0
		
		next := new Test
		assert forall j: int :: next == null ? true : f(j) > 0
			 
		next := null
		assert forall j: int :: next == null ? true : f(j) > 0
		
		next := new Test
		assert forall j: int :: next == null ? true : f(j) > 0
	}
}